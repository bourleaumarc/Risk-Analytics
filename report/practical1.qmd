---
title: "Deliverable 1"
author: "Group"
date: "2023-11-16"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
```

```{r, echo = FALSE, message = FALSE, warning=FALSE}
source(here::here("script/setup.R"))
```

# Part 1: financial returns and normality

## (a) Read in the data and assess the stationarity of the raw stock indices.

We are going to use two methods. The first one, is to visualize the stock indices over time to get a sense of whether they appear stationary or not; using `plot()`.

```{r question a }
# Create interactive plots for each index
plot_sp500 <- plot_ly(x = sp500.df$DATE, y = sp500.df$SP500, type = "scatter", mode = "lines", name = "SP500") %>%
  layout(title = "SP500")

plot_cac40 <- plot_ly(x = cac40.df$DATE, y = cac40.df$CAC40, type = "scatter", mode = "lines", name = "CAC40") %>%
  layout(title = "CAC40")

plot_nasdaq <- plot_ly(x = nasdaq.df$DATE, y = nasdaq.df$NASDAQ, type = "scatter", mode = "lines", name = "Nasdaq") %>%
  layout(title = "Nasdaq")

plot_nikkei <- plot_ly(x = nikkei.df$DATE, y = nikkei.df$NIKKEI, type = "scatter", mode = "lines", name = "NIKKEI") %>%
  layout(title = "NIKKEI")

combined_plot <- subplot(plot_sp500, plot_cac40, plot_nasdaq, plot_nikkei, nrows = 2)

# Set a common title for the entire grid
combined_plot <- layout(combined_plot, title = "Comparison of Stock Indices")

# Show the combined plot
combined_plot

```

It appears that none of the stock indices are stationary based on the plots generated. These plots clearly show the presence of trends, which are a strong indicator of non-stationarity data. For instance, if we take the NASDAQ index as an example, it exhibits a noticeable upward trend between 1999 and the beginning of 2000.

Another common approach is to use the Augmented-Dickey-Fuller (ADF) test. If we can reject the null hypothesis (p-value \< 0.05), then we can consider the time-series to be stationary. The null hypothesis of this test is that the time series is non-stationary. If the p-value is less than your significance level, you can reject the null hypothesis and consider the series stationary.

```{r question a: adf test}
# ADF - Test 
adf_test_sp500 <- adf.test(sp500$SP500) ; adf_test_sp500
adf_test_nasdaq <- adf.test(nasdaq$NASDAQ) ; adf_test_nasdaq
adf_test_cac40 <- adf.test(cac40$CAC40) ; adf_test_cac40
adf_test_nikkei <- adf.test(nikkei$NIKKEI) ; adf_test_nikkei
```

We can't reject any of the null hypothesis, implying that we do not have enough evidence to conclude that the data is stationary.

## (b) Create a function to transform the daily stock indices into their daily negative log returns counterparts. Plot the latter series and assess their stationarity. To compare the series, also plot the negative log returns on a common scale to all indices.

```{r question b}
# Define a function to calculate negative log returns
calculate_log_returns <- function(stocks) {
  log_returns <- -diff(log(stocks))
  return(log_returns)
}
# Calculate negative log returns for each index
log_returns_sp500 <- calculate_log_returns(sp500)
log_returns_cac40 <- calculate_log_returns(cac40)
log_returns_nasdaq <- calculate_log_returns(nasdaq)
log_returns_nikkei <- calculate_log_returns(nikkei)
# We need to transform the index of rows as a separate variable to include the date into the plots: we create a function
log_returns_sp500$Dates <- rownames(log_returns_sp500)
log_returns_sp500.df <- data.frame(log_returns_sp500)
log_returns_cac40$Dates <- rownames(log_returns_cac40)
log_returns_cac40.df <- data.frame(log_returns_cac40)
log_returns_nasdaq$Dates <- rownames(log_returns_nasdaq)
log_returns_nasdaq.df <- data.frame(log_returns_nasdaq)
log_returns_nikkei$Dates <- rownames(log_returns_nikkei)
log_returns_nikkei.df <- data.frame(log_returns_nikkei)
# Plot for SP500
plot_sp5002 <- plot_ly(x = log_returns_sp500.df$Dates, y = log_returns_sp500, type = "scatter", mode = "lines", name = "SP500") %>% layout(title = "SP500 Negative Log Returns", xaxis = list(title = "Time"), yaxis = list(title = "Negative Log Returns"), shapes = list(list(type = "line", x0 = 1, x1 = length(log_returns_sp500), y0 = 0, y1 = 0, line = list(color = "red"))))

# Plot for CAC40
plot_cac402 <- plot_ly(x = log_returns_cac40.df$Dates, y = log_returns_cac40, type = "scatter", mode = "lines", name = "CAC40") %>% layout(title = "CAC40 Negative Log Returns", xaxis = list(title = "Time"), yaxis = list(title = "Negative Log Returns"), shapes = list(list(type = "line", x0 = 1, x1 = length(log_returns_cac40), y0 = 0, y1 = 0, line = list(color = "red"))))

# Plot for Nasdaq
plot_nasdaq2 <- plot_ly(x = log_returns_nasdaq.df$Dates , y = log_returns_nasdaq, type = "scatter", mode = "lines", name = "Nasdaq") %>% layout(title = "Nasdaq Negative Log Returns", xaxis = list(title = "Time"), yaxis = list(title = "Negative Log Returns"), shapes = list(list(type = "line", x0 = 1, x1 = length(log_returns_nasdaq), y0 = 0, y1 = 0, line = list(color = "red"))))

# Plot for NIKKEI
plot_nikkei2 <- plot_ly(x = log_returns_nikkei.df$Dates , y = log_returns_nikkei, type = "scatter", mode = "lines", name = "NIKKEI") %>% layout(title = "Negative Log Returns", xaxis = list(title = "Time"), yaxis = list(title = "Negative Log Returns"), shapes = list(list(type = "line", x0 = 1, x1 = length(log_returns_nikkei), y0 = 0, y1 = 0, line = list(color = "red"))))

# Create a subplot with the list of individual plots
combined_plot2 <- subplot(plot_sp5002, plot_cac402, plot_nasdaq2, plot_nikkei2, nrows = 2)
combined_plot2 <- layout(combined_plot2, title = "Comparison of negative log return of Stock Indices (same scale)")
# Show the combined plot
combined_plot2

```

Looking at the comparison of negative logarithm return of the stock indices, we discern the following: - mean is not constant: not centered around 0, implying that there is a long-term trend in the indexes. - variance is not constant: there are clear upward/downward trends. SP500 has very high spikes, such as the one in 1997-10-27.

Therefore, graphically, the indexes seem to be non-stationary. Moreover, we should check test ADF.

## (c) Draw histograms of the negative log returns and compare them to the Normal distribution. What do you observe?
```{r question c }
# Set the number of histogram bins
num_bins <- 30
# Create a common scale for the histograms
par(mfrow = c(2, 2))  # Create a 2x2 grid of plots

# Plot histograms and overlay Normal distribution curves
hist(log_returns_sp500, breaks = num_bins, main = "Histogram - SP500 Log Returns", xlab = "Log Returns", probability = TRUE, xlim=c(0.1,-0.1))
curve(dnorm(x, mean = mean(log_returns_sp500), sd = sd(log_returns_sp500)), col = "blue", lwd = 2, add = TRUE)

hist(log_returns_cac40, breaks = num_bins, main = "Histogram - CAC40 Log Returns", xlab = "Log Returns", probability = TRUE, xlim=c(0.1,-0.1))
curve(dnorm(x, mean = mean(log_returns_cac40), sd = sd(log_returns_cac40)), col = "blue", lwd = 2, add = TRUE)

hist(log_returns_nasdaq, breaks = num_bins, main = "Histogram - Nasdaq Log Returns", xlab = "Log Returns", probability = TRUE, xlim=c(0.1,-0.1))
curve(dnorm(x, mean = mean(log_returns_nasdaq), sd = sd(log_returns_nasdaq)), col = "blue", lwd = 2, add = TRUE)

hist(log_returns_nikkei, breaks = num_bins, main = "Histogram - NIKKEI Log Returns", xlab = "Log Returns", probability = TRUE, xlim=c(0.1,-0.1))
curve(dnorm(x, mean = mean(log_returns_nikkei), sd = sd(log_returns_nikkei)), col = "blue", lwd = 2, add = TRUE)

# Reset the plot layout
par(mfrow = c(1, 1))


```

By comparing it to a normal distribution, we can notice several pieces of information.

SP500: Lots of values close to 0, which corresponds to the observations we've made on the negative log returns. CAC40: A bit heavy-tailed, but close to a normal distribution. Nasdaq: Right-skewed, which might indicate the presence of more extreme values on the right side. The tails also look heavier than all other indices. Nikkei: Seem to be the closest to a Normal Distribution.

To confirm those observations, we will need analysis tools which we will use further in this document.
## (d) Check the normality assumption of the negative log returns using QQ-plots. What is your conclusion?

```{r question d }
# Create QQ-plots for log returns

par(mfrow = c(2, 2))  # Create a 2x2 grid of plots

qqnorm(log_returns_sp500, main = "QQ-Plot - SP500 Log Returns")
qqline(log_returns_sp500)
qqnorm(log_returns_cac40, main = "QQ-Plot - CAC40 Log Returns")
qqline(log_returns_cac40)
qqnorm(log_returns_nasdaq, main = "QQ-Plot - Nasdaq Log Returns")
qqline(log_returns_nasdaq)
qqnorm(log_returns_nikkei, main = "QQ-Plot - NIKKEI Log Returns")
qqline(log_returns_nikkei)
```

As we can see from the QQ-plots, data points are all heavily deviating from the line, which indicates that the indices cannot be estimated by a normal distribution, thus underestimating the extreme values. In the Nasdaq plot, for example, we can see the most extreme value from negative log returns on the left side. One thing to note is that these plot don't have the same scale. This hsows once again the high variation from Nasdaq, but from all other indices as well.

## (e) Formally test the normality assumption of the negative log returns using an Anderson-Darling testing procedure. Do you reject the Normal hypothesis?
```{r question e}
# Perform Anderson-Darling test for normality
ad_test_sp500 <- ad.test(log_returns_sp500)
ad_test_cac40 <- ad.test(log_returns_cac40)
ad_test_nasdaq <- ad.test(log_returns_nasdaq)
ad_test_nikkei <- ad.test(log_returns_nikkei)

# Print the results
print(ad_test_sp500)
print(ad_test_cac40)
print(ad_test_nasdaq)
print(ad_test_nikkei)

```

In each case, the p-value is extremely close to zero (p-value \< 2.2e-16), which indicates strong evidence against the null hypothesis that the data follows a normal distribution.The test statistics are relatively large, further indicating that the data significantly deviates from a normal distribution.Based on the p-values and test statistics, we can conclude that the negative log returns for each of the stock indices (SP500, CAC40, Nasdaq, NIKKEI) do not follow a normal distribution. Instead, they exhibit departures from normality.

## (f) Use the fitdistr() function from the MASS package in order to obtain the (maximum-likelihood estimated) parameters of distributions you could imagine for the negative log returns. Try to fit at least two different distributions on the data and, using an information criteria (such as the AIC), decide which distributional framework fits best for each of the series.
```{r question f}
# Remove missing values from log return datasets
log_returns_sp500 <- log_returns_sp500[!is.na(log_returns_sp500)]
log_returns_cac40 <- log_returns_cac40[!is.na(log_returns_cac40)]
log_returns_nasdaq <- log_returns_nasdaq[!is.na(log_returns_nasdaq)]
log_returns_nikkei <- log_returns_nikkei[!is.na(log_returns_nikkei)]

# Fit distributions : normal
fit_sp500 <- fitdistr(log_returns_sp500, "normal")
fit_cac40 <- fitdistr(log_returns_cac40, "normal")
fit_nasdaq <- fitdistr(log_returns_nasdaq, "normal")
fit_nikkei <- fitdistr(log_returns_nikkei, "normal")

# Fit a t-distribution to log returns
fit_sp500_t <- fitdistr(log_returns_sp500, "t")
fit_cac40_t <- fitdistr(log_returns_cac40, "t")
fit_nasdaq_t <- fitdistr(log_returns_nasdaq, "t")
fit_nikkei_t <- fitdistr(log_returns_nikkei, "t")

# Calculate AIC for each distribution
aic_sp500 <- AIC(fit_sp500)
aic_cac40 <- AIC(fit_cac40)
aic_nasdaq <- AIC(fit_nasdaq)
aic_nikkei <- AIC(fit_nikkei)

# Calculate AIC for each distribution
aic_sp500_t <- AIC(fit_sp500_t)
aic_cac40_t <- AIC(fit_cac40_t)
aic_nasdaq_t <- AIC(fit_nasdaq_t)
aic_nikkei_t <- AIC(fit_nikkei_t)

# Create a data frame to store AIC values
aic_data <- data.frame(
  Index = c("SP500", "CAC40", "NASDAQ", "NIKKEI"),
  Normal = c(aic_sp500, aic_cac40, aic_nasdaq, aic_nikkei),
  T_Distribution = c(aic_sp500_t, aic_cac40_t, aic_nasdaq_t, aic_nikkei_t)
)

# Print the AIC data frame
print(aic_data)

# Create a bar plot of AIC values
barplot(
  t(as.matrix(aic_data[, -1])),
  beside = TRUE,
  col = c("blue", "red"),
  names.arg = aic_data$Index,
  main = "AIC Comparison of Distributions",
  xlab = "Index",
  ylab = "AIC Value",
  legend.text = c("Normal", "T-Distribution"),
  args.legend = list(x = "topright", bty = "n")
)
```

For the 4 indices, even though the difference is minimal compared to the scale, the Student distribution is systematically better than the Normal distribution (the AIC value is lower).

As a result, we will continue analyzing the indices with the Student distribution.
## (g) If this has not been done in (f), fit a t-distribution to the negative log returns using `fitdistr()`.Using a QQ-plot for each of the series, decide whether the fit is better than with a Normal distribution, based on your answer in (d).

```{r question g}
par(mfrow = c(2, 2))  # Create a 2x2 grid of plots

# Create QQ-plots for t-distributions
qqnorm(rt(length(log_returns_sp500), df = fit_sp500_t$estimate["df"]), main = "QQ-Plot - SP500 Log Returns (t-dist)")
qqline(rt(length(log_returns_sp500), df = fit_sp500_t$estimate["df"]))

qqnorm(rt(length(log_returns_cac40), df = fit_cac40_t$estimate["df"]), main = "QQ-Plot - CAC40 Log Returns (t-dist)")
qqline(rt(length(log_returns_cac40), df = fit_cac40_t$estimate["df"]))

qqnorm(rt(length(log_returns_nasdaq), df = fit_nasdaq_t$estimate["df"]), main = "QQ-Plot - Nasdaq Log Returns (t-dist)")
qqline(rt(length(log_returns_nasdaq), df = fit_nasdaq_t$estimate["df"]))

qqnorm(rt(length(log_returns_nikkei), df = fit_nikkei_t$estimate["df"]), main = "QQ-Plot - NIKKEI Log Returns (t-dist)")
qqline(rt(length(log_returns_nikkei), df = fit_nikkei_t$estimate["df"]))

```
# Part 2: Financial time series, volatility and the random walk hypothesis 
## (a) Plot the ACF of all the series in Part 1 (i.e. the raw series as well as the negative log returns).What do you observe?
```{r question 2a}
##############################################################  RAW SERIES ############################################################### 
par(mfrow = c(2, 2))  # Create a 2x2 grid of plots
par(oma = c(0, 0, 3, 0)) # Adjust the outer margins to make space for the title

# Plot ACF for the S&P 500 index with adjusted margins
par(mar = c(5, 4, 3, 2))
acf(sp500, main = "ACF of S&P 500 Index")

# Plot ACF for the CAC 40 index with adjusted margins
par(mar = c(5, 4, 3, 2))
acf(cac40, main = "ACF of CAC 40 Index")

# Plot ACF for the NASDAQ index with adjusted margins
par(mar = c(5, 4, 3, 2))
acf(nasdaq, main = "ACF of NASDAQ Index")

# Plot ACF for the Nikkei index with adjusted margins
par(mar = c(5, 4, 3, 2))
acf(nikkei, main = "ACF of Nikkei Index")

# Add the main title
mtext("ACF of raw series", outer = TRUE, cex = 1.5, line = 1)

##############################################################  NEGATIVE LOG RETURNS ################################################################ 

# Setting up the 2x2 plot area with adjusted outer margins for the title
par(mfrow = c(2, 2), oma = c(0, 0, 2, 0))

# Plot ACF for the S&P 500 index with adjusted margins
par(mar = c(5, 4, 3, 2))
acf(log_returns_sp500, main = "ACF of S&P 500 Index")

# Plot ACF for the CAC 40 index with adjusted margins
par(mar = c(5, 4, 3, 2))
acf(log_returns_cac40, main = "ACF of CAC 40 Index")

# Plot ACF for the NASDAQ index with adjusted margins
par(mar = c(5, 4, 3, 2))
acf(log_returns_nasdaq, main = "ACF of NASDAQ Index")

# Plot ACF for the Nikkei index with adjusted margins
par(mar = c(5, 4, 3, 2))
acf(log_returns_nikkei, main = "ACF of Nikkei Index")

# Add the central title
mtext("ACF of Negative Log Returns", outer = TRUE, cex = 1.5, line = 0)
```

By plotting the raw series, we cannot say anything since all values are auto correlated with one another.

Plotting the negative log returns, none of the values seem to be closely auto correlated with the initial measure, though there are some outliers.

## (b) Use a Ljung-Box procedure to formally test for (temporal) serial dependence in the series. What is your conclusion?
```{r question 2b}
##############################################################  RAW SERIES ############################################################### 
Box.test(sp500, type = "Ljung-Box")
Box.test(cac40, type = "Ljung-Box")
Box.test(nasdaq, type = "Ljung-Box")
Box.test(nikkei, type = "Ljung-Box")
##############################################################  NEGATIVE LOG RETURNS ################################################################ 
Box.test(log_returns_sp500, type = "Ljung-Box")
Box.test(log_returns_cac40, type = "Ljung-Box")
Box.test(log_returns_nasdaq, type = "Ljung-Box")
Box.test(log_returns_nikkei, type = "Ljung-Box")
```

The null hypothesis of the Ljung-Box test is that the residuals are independent (i.e., no autocorrelation). From these results, we can see that all 4 indices show a very small p-value (\<2.2e-16) and that they are not independent.

We therefore reject the null hypothesis.
Using the negative log-returns, we have high p-values, meaning that we can't reject the hypothesis that the data points are auto-correlated (i.e independent).

However, it's almost not the case for the Nikkei index, as it's p-value is almost 0.05. Therefore, it's the one that appears to have the less autocorrelation.

## (c) Propose ARIMA models for each of the negative log returns series, based on visualisation tools (e.g. ACF and PACF). Select an ARIMA model using `auto.arima()` (forecast package) to each of the negative log returns series. Comment on the difference. Assess the residuals of the resulting models.

In order to select the order of the

```{r question 2c}
par(mfrow = c(2, 2))  # Create a 2x2 grid of plots
par(oma = c(0, 0, 1, 0))


par(mar = c(5, 4, 3, 2))
pacf(log_returns_sp500)

par(mar = c(5, 4, 3, 2))
pacf(log_returns_cac40)

par(mar = c(5, 4, 3, 2))
pacf(log_returns_nasdaq)

par(mar = c(5, 4, 3, 2))
pacf(log_returns_nikkei)
```

(c) Propose ARIMA for the negative log returns.

```{r}
## ADF FOR SP500 
adf.test(log_returns_sp500)

## ADF FOR CAC40
adf.test(log_returns_cac40)

## ADF FOR NASDAQ
adf.test(log_returns_nasdaq)

## ADF FOR NIKKEI
adf.test(log_returns_nikkei)



```

d = 0, no need to differentiate as p-value \< 0.05. 

```{r}
############################## CHOOSING OUR OWN ORDER ############################## 
## ARIMA SP500
Arima(log_returns_sp500, order = c(8,0,7))
## ARIMA CAC40
Arima(log_returns_cac40, order = c(5,0,5))
## ARIMA NASDAQ
Arima(log_returns_nasdaq, order = c(7,0,7))
## ARIMA NIKKEI
Arima(log_returns_nikkei, order = c(1,0,1))
##############################  AUTO ARIMA ############################## 
plot_1 <- auto.arima(log_returns_sp500) # better the auto with parameters: ARIMA(2,0,1) non-zero mean 
plot_2 <- auto.arima(log_returns_cac40) # better the auto with parameters: ARIMA(0,0,0) zero-mean 
plot_3 <- auto.arima(log_returns_nasdaq)# better the auto with parameters: ARIMA(2,0,2) with zero mean 
plot_4 <- auto.arima(log_returns_nikkei)# better the auto with parameters: ARIMA(2,0,1) with zero mean 
#### Assess the residuals
# Plot the residuals
plot(plot_1$residuals); plot(plot_2$residuals); plot(plot_3$residuals); plot(plot_4$residuals)
# Check for zero mean 
mean(plot_1$residuals); mean(plot_2$residuals) ; mean(plot_3$residuals) ; mean(plot_4$residuals) # all residual's means are very close from 0 
```
Using `auto.arima` yields better results in terms of AIC. By assessing the residuals, we observe that they might be independent, as their mean is close to 0. 

## (d) Assess the residuals of the resulting models from (c), both their raw values and their absolute values, through visual tools (such as the ACF) and formal tests (e.g. Ljung-Box). What do you conclude about the independence assumption?

```{r question 2d}
# Ljung-Box test for autocorrelation in residuals
# Obtain raw residuals
raw_residuals_sp500 <- residuals(plot_1)
raw_residuals_cac40 <- residuals(plot_2)
raw_residuals_nasdaq <- residuals(plot_3)
raw_residuals_nikkei <- residuals(plot_4)

# Obtain absolute residuals
absolute_residuals_sp500 <- abs(raw_residuals_sp500)
absolute_residuals_cac40 <- abs(raw_residuals_cac40)
absolute_residuals_nasdaq <- abs(raw_residuals_nasdaq)
absolute_residuals_nikkei <- abs(raw_residuals_nikkei)

# Plot ACF of raw residuals
Acf(raw_residuals_sp500, main = "ACF of Raw Residuals SP 500")
Acf(raw_residuals_cac40, main = "ACF of Raw Residuals CAC 40")
Acf(raw_residuals_nasdaq, main = "ACF of Raw Residuals NASDAQ")
Acf(raw_residuals_nikkei, main = "ACF of Raw Residuals NIKKEI")

# Plot ACF of absolute residuals
Acf(absolute_residuals_sp500, main = "ACF of Absolute Residuals SP 500")
Acf(absolute_residuals_cac40, main = "ACF of Absolute Residuals CAC40")
Acf(absolute_residuals_nasdaq, main = "ACF of Absolute Residuals NASDAQ")
Acf(absolute_residuals_nikkei, main = "ACF of Absolute Residuals NIKKEI")

# Ljung-Box test on raw residuals
Box.test(raw_residuals_sp500, type = "Ljung-Box")
Box.test(raw_residuals_cac40, type = "Ljung-Box")
Box.test(raw_residuals_nasdaq, type = "Ljung-Box")
Box.test(raw_residuals_nikkei, type = "Ljung-Box")

# Ljung-Box test on absolute residuals
Box.test(absolute_residuals_sp500, type = "Ljung-Box")
Box.test(absolute_residuals_cac40, type = "Ljung-Box")
Box.test(absolute_residuals_nasdaq, type = "Ljung-Box")
Box.test(absolute_residuals_nikkei, type = "Ljung-Box")

```
Ho: data are independently distributed, implying that there is no autocorrelation among the values.
H1: data exhibit some level of autocorrelation, meaning that past values in the series have a statistically significant influence on future values.

Looking at the Raw and Absolute residuals through ACF and Ljung-Box, we can see that SP500, CAC400 and NASDAQ residuals are autocorrelated. Moreover, NIKKEI's does not exhibit auto-correlation of the residuals for it's raw values, it does for the absolute. Therefore, we reject the assumption that residuals are independent. 

Therefore, we conclude that the ARIMA models are not a good fit for the data that show heteroscedasticity of the residuals but we hope that the GARCH model with deal with it. 


## (e) Plot the volatility of the raw series of indices. What is your conclusion on the homoscedasticity assumption?
```{r question 3e}
# Calculate volatility
# SP500
volatility_sp500 <- volatility(as.vector(sp500.df$SP500))
plot(volatility_sp500, type="l", main="Volatility of the Raw SP 500", ylab="Volatility", xlab="Time")

# CAC40
volatility_cac40 <- volatility(as.vector(cac40.df$CAC40))
plot(volatility_cac40, type="l", main="Volatility of the Raw CAC 40", ylab="Volatility", xlab="Time")

# NASDAQ
volatility_nasdaq <- volatility(as.vector(nasdaq.df$NASDAQ))
plot(volatility_nasdaq, type="l", main="Volatility of the Raw NASDAQ", ylab="Volatility", xlab="Time")

# NIKKEI
volatility_nikkei <- volatility(as.vector(nikkei.df$NIKKEI))
plot(volatility_nikkei, type="l", main="Volatility of the Raw NIKKEI", ylab="Volatility", xlab="Time")

```
The volatility is not constant, which again violates the assumption of homoscedasticity. We will fit a GARCH model that addresses the issue of heteroscedasticity of the residuals. 

## (f) Fit GARCH models to the negative log returns of each series with both standardised and skewed t-distributions, with order (1; 1), using the garchFit() function from the fGarch library. Assess the quality of the fit by evaluating the residuals.
```{r question 2f}
# Fit a GARCH(1,1) model with standard t-distribution to the log returns
garch_sp500_std <- garchFit(~garch(1, 1), data = log_returns_sp500, cond.dist = "std")
garch_cac40_std <- garchFit(~garch(1, 1), data = log_returns_cac40, cond.dist = "std")
garch_NASDAQ_std <- garchFit(~garch(1, 1), data = log_returns_nasdaq, cond.dist = "std")
garch_nikkei_std <- garchFit(~garch(1, 1), data = log_returns_nikkei, cond.dist = "std")


# Fit a GARCH(1,1) model with skewed t-distribution to the log returns
garch_sp500_sstd <- garchFit(~garch(1, 1), data = log_returns_sp500, cond.dist = "sstd")
garch_cac40_sstd <- garchFit(~garch(1, 1), data = log_returns_cac40, cond.dist = "sstd")
garch_NASDAQ_sstd <- garchFit(~garch(1, 1), data = log_returns_nasdaq, cond.dist = "sstd")
garch_nikkei_sstd <- garchFit(~garch(1, 1), data = log_returns_nikkei, cond.dist = "sstd")


# After fitting the models, evaluate the residuals:
# For standardized t-distribution
residuals_sp500_std <- residuals(garch_sp500_std)
residuals_cac40_std <- residuals(garch_cac40_std)
residuals_NASDAQ_std <- residuals(garch_NASDAQ_std)
residuals_nikkei_std <- residuals(garch_nikkei_std)

# For skewed t-distribution
residuals_sp500_sstd <- residuals(garch_sp500_sstd)
residuals_cac40_sstd <- residuals(garch_cac40_sstd)
residuals_NASDAQ_sstd <- residuals(garch_NASDAQ_sstd)
residuals_nikkei_sstd <- residuals(garch_nikkei_sstd)

# Plot the residuals and their ACF to assess quality
# Using plot
plot(residuals_sp500_std, main="Residuals of SP500 GARCH Model with std t-dist")
acf(residuals_sp500_std^2, main="ACF of Squared Residuals for SP500 with std t-dist")
plot(residuals_cac40_std, main="Residuals of CAC40 GARCH Model with std t-dist")
acf(residuals_cac40_std^2, main="ACF of Squared Residuals for CAC40 with std t-dist")
plot(residuals_NASDAQ_std, main="Residuals of NASDAQ GARCH Model with std t-dist")
acf(residuals_NASDAQ_std^2, main="ACF of Squared Residuals for NASDAQ with std t-dist")
plot(residuals_nikkei_std, main="Residuals of NIKKEI GARCH Model with std t-dist")
acf(residuals_nikkei_std^2, main="ACF of Squared Residuals for NIKKEI with std t-dist")
# For skewed distribution
plot(residuals_sp500_sstd, main="Residuals of SP500 GARCH Model with sstd t-dist")
acf(residuals_sp500_sstd^2, main="ACF of Squared Residuals for SP500 with sstd t-dist")
plot(residuals_cac40_sstd, main="Residuals of CAC40 GARCH Model with sstd t-dist")
acf(residuals_cac40_sstd^2, main="ACF of Squared Residuals for CAC40 with sstd t-dist")
plot(residuals_NASDAQ_sstd, main="Residuals of NASDAQ GARCH Model with sstd t-dist")
acf(residuals_NASDAQ_sstd^2, main="ACF of Squared Residuals for NASDAQ with sstd t-dist")
plot(residuals_nikkei_sstd, main="Residuals of NIKKEI GARCH Model with sstd t-dist")
acf(residuals_nikkei_sstd^2, main="ACF of Squared Residuals for NIKKEI with sstd t-dist")
# Perform a Ljung-Box test on the squared residuals to check for remaining autocorrelation
Box.test(residuals_sp500_std^2, lag = 20, type = "Ljung-Box")
Box.test(residuals_sp500_sstd^2, lag = 20, type = "Ljung-Box")
Box.test(residuals_cac40_std^2, lag = 20, type = "Ljung-Box")
Box.test(residuals_cac40_sstd^2, lag = 20, type = "Ljung-Box")
Box.test(residuals_NASDAQ_std^2, lag = 20, type = "Ljung-Box")
Box.test(residuals_NASDAQ_sstd^2, lag = 20, type = "Ljung-Box")
Box.test(residuals_nikkei_std^2, lag = 20, type = "Ljung-Box")
Box.test(residuals_nikkei_sstd^2, lag = 20, type = "Ljung-Box")

```
Ho: data are independently distributed, implying that there is no autocorrelation among the values.
H1: data exhibit some level of autocorrelation, meaning that past values in the series have a statistically significant influence on future values.

The quality of the fit is very poor as the null hypothesis is rejected, implying that the negative log return exhibit some level of autocorrelation. 

## (g) Residual serial correlation can be present when  tting a GARCH directly on the negative log returns.

```{r question 3g}
# Step 1: Fit an ARMA model
# Using auto.arima to automatically select the best p, q
arma_sp500_fit <- auto.arima(log_returns_sp500)
arma_cac40_fit <- auto.arima(log_returns_cac40)
arma_NASDAQ_fit <- auto.arima(log_returns_nasdaq)
arma_nikkei_fit <- auto.arima(log_returns_nikkei)

# Extract the residuals
arma_sp500_residuals <- residuals(arma_sp500_fit)
arma_cac40_residuals <- residuals(arma_cac40_fit)
arma_NASDAQ_residuals <- residuals(arma_NASDAQ_fit)
arma_nikkei_residuals <- residuals(arma_nikkei_fit)

# Step 2: Fit a GARCH(1,1) model on the residuals of the ARMA model
# Fit with standard t-distribution
garch_sp500_std <- garchFit(~garch(1, 1), data = arma_sp500_residuals, cond.dist = "std")
garch_cac40_std <- garchFit(~garch(1, 1), data = arma_cac40_residuals, cond.dist = "std")
garch_NASDAQ_std <- garchFit(~garch(1, 1), data = arma_NASDAQ_residuals, cond.dist = "std")
garch_nikkei_std <- garchFit(~garch(1, 1), data = arma_nikkei_residuals, cond.dist = "std")


# Fit with skewed t-distribution
garch_sp500_sstd <- garchFit(~garch(1, 1), data = arma_sp500_residuals, cond.dist = "sstd")
garch_cac40_sstd <- garchFit(~garch(1, 1), data = arma_cac40_residuals, cond.dist = "sstd")
garch_NASDAQ_sstd <- garchFit(~garch(1, 1), data = arma_NASDAQ_residuals, cond.dist = "sstd")
garch_nikkei_sstd <- garchFit(~garch(1, 1), data = arma_nikkei_residuals, cond.dist = "sstd")

# Assess the quality of the fit
# For standard t-distribution
residuals_sp500_std <- residuals(garch_sp500_std)
residuals_cac40_std <- residuals(garch_cac40_std)
residuals_NASDAQ_std <- residuals(garch_NASDAQ_std)
residuals_nikkei_std <- residuals(garch_nikkei_std)
plot(residuals_sp500_std, main="Residuals of SP500 ARMA-GARCH Model with std t-dist")
plot(residuals_cac40_std, main="Residuals of CAC40 ARMA-GARCH Model with std t-dist")
plot(residuals_NASDAQ_std, main="Residuals of NASDAQ ARMA-GARCH Model with std t-dist")
plot(residuals_nikkei_std, main="Residuals of NIKKEI ARMA-GARCH Model with std t-dist")

acf(residuals_sp500_std^2, main="ACF of Squared Residuals for SP500 ARMA-GARCH with std t-dist")
acf(residuals_cac40_std^2, main="ACF of Squared Residuals for CAC40 ARMA-GARCH with std t-dist")
acf(residuals_NASDAQ_std^2, main="ACF of Squared Residuals for NASDAQ ARMA-GARCH with std t-dist")
acf(residuals_nikkei_std^2, main="ACF of Squared Residuals for NIKKEI ARMA-GARCH with std t-dist")

Box.test(residuals_sp500_std^2, lag = 20, type = "Ljung-Box")
Box.test(residuals_cac40_std^2, lag = 20, type = "Ljung-Box")
Box.test(residuals_NASDAQ_std^2, lag = 20, type = "Ljung-Box")
Box.test(residuals_nikkei_std^2, lag = 20, type = "Ljung-Box")


# For skewed t-distribution
residuals_sp500_sstd <- residuals(garch_sp500_sstd)
residuals_cac40_sstd <- residuals(garch_cac40_sstd)
residuals_NASDAQ_sstd <- residuals(garch_NASDAQ_sstd)
residuals_nikkei_sstd <- residuals(garch_nikkei_sstd)

plot(residuals_sp500_sstd, main="Residuals of SP500 ARMA-GARCH Model with sstd t-dist")
plot(residuals_cac40_sstd, main="Residuals of CAC40 ARMA-GARCH Model with sstd t-dist")
plot(residuals_NASDAQ_sstd, main="Residuals of NASDAQ ARMA-GARCH Model with sstd t-dist")
plot(residuals_nikkei_sstd, main="Residuals of NIKKEI ARMA-GARCH Model with sstd t-dist")

acf(residuals_sp500_sstd^2, main="ACF of Squared Residuals for SP500 ARMA-GARCH with sstd t-dist")
acf(residuals_cac40_sstd^2, main="ACF of Squared Residuals for CAC40 ARMA-GARCH with sstd t-dist")
acf(residuals_NASDAQ_sstd^2, main="ACF of Squared Residuals for NASDAQ ARMA-GARCH with sstd t-dist")
acf(residuals_nikkei_sstd^2, main="ACF of Squared Residuals for NIKKEI ARMA-GARCH with sstd t-dist")

Box.test(residuals_sp500_sstd^2, lag = 20, type = "Ljung-Box")
Box.test(residuals_cac40_sstd^2, lag = 20, type = "Ljung-Box")
Box.test(residuals_NASDAQ_sstd^2, lag = 20, type = "Ljung-Box")
Box.test(residuals_nikkei_sstd^2, lag = 20, type = "Ljung-Box")


