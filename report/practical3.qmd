---
title: "TP3_RA"
output: html_document
date: "2023-11-30"
---

# Practical 3 
```{r, warning = FALSE}
source(here::here("script/setup.R"))
```
 
## Part 1

### (a) Read in the data and select only the winter temperature data. You can use the code lines of the file GetData.R to get the data and select only the winter values.

```{r}
##### Download daily NAO measurements
NAO.daily <- fread('ftp://ftp.cdc.noaa.gov/Public/gbates/teleconn/nao.reanalysis.t10trunc.1948-present.txt')
NAO.daily <- as.matrix(NAO.daily)
colnames(NAO.daily) <- c("year","month","day","NAO")

##### Download temperature data: be sure to work in the correct directory
months <- c(12,1,2) #keep only winter observations
temp_max_Zermatt           <- read_delim(here::here("data/practical_3/daily_maximum_Zermatt/order_107669_data.txt"), 
                                         ";", escape_double = FALSE, col_types = 
                                           cols(time = col_number()), 
                                         trim_ws = TRUE, skip = 1)

colnames(temp_max_Zermatt) <- c("station","time","temp")
temp_max_Zermatt           <- temp_max_Zermatt[-1,]
temp_max_Zermatt[,2]       <- as.Date(apply(temp_max_Zermatt[,2],1,as.character),
                                      "%Y%m%d")

temp_max_Montana           <- read_delim(here::here("data/practical_3/daily_maximum_Montana/order_107668_data.txt"), 
                                         ";", escape_double = FALSE, col_types = 
                                           cols(time = col_number()), 
                                         trim_ws = TRUE, skip = 1)

colnames(temp_max_Montana) <- c("station","time","temp")
temp_max_Montana           <- temp_max_Montana[-1,]
temp_max_Montana[,2]       <- as.Date(apply(temp_max_Montana[,2],1,as.character),
                                      "%Y%m%d")

###match the dates of the two time series
temp_max_Montana           <- temp_max_Montana[match(as.matrix(temp_max_Zermatt[,2]),
                                                     as.matrix(temp_max_Montana[,2])),]
temp_max_Montana           <- as.matrix(temp_max_Montana)
colnames(temp_max_Montana) <- c("station","time","temp")
temp_max_Zermatt           <- as.matrix(temp_max_Zermatt)
colnames(temp_max_Zermatt) <- c("station","time","temp")

###keep only winter dates
temp_max_Montana <- temp_max_Montana[which(month(as.POSIXlt(temp_max_Montana[,"time"], 
                                                            format="%Y-%m-%d")) %in% months),]
temp_max_Zermatt <- temp_max_Zermatt[which(month(as.POSIXlt(temp_max_Zermatt[,"time"], 
                                                            format="%Y-%m-%d")) %in% months),]


Date       <- function( length = 0 ){
  newDate = numeric( length )
  class(newDate) = "Date"
  return(newDate)
}

season_day                   <- yday(as.Date(temp_max_Montana[,2]))
season_day[season_day < 61]  <- season_day[season_day < 61] + 31
season_day[season_day > 334] <- season_day[season_day > 334]- 334

NAO.date <- Date(nrow(NAO.daily))
for(i in 1:nrow(NAO.daily)){
  NAO.date[i] <- as.Date(paste(as.character(NAO.daily[i,1]),"-",as.character(NAO.daily[i,2]),
                               "-",as.character(NAO.daily[i,3]),sep=""),format="%Y-%m-%d")
}
NAO.daily <- mutate(as.tibble(NAO.daily), date = make_date(year, month, day))

index <- as.Date(intersect(as.Date(temp_max_Montana[,2]),as.Date(NAO.date)))

nao <- NAO.daily[which(NAO.daily$date %in% index), 4]
nao <- as.vector(nao)

#Montana
x_Montana          <- data.frame("time"=temp_max_Montana[,2],
                                 "nao"=nao,
                                 "d"=season_day,
                                 "temp"=temp_max_Montana[,3])

as.numeric.factor  <- function(x) {as.numeric(levels(x))[x]}
x_Montana[,"temp"] <- as.numeric(x_Montana[,"temp"])
x_Montana[,"time"] <- as.numeric(year(as.POSIXlt(x_Montana[,"time"], format="%Y-%m-%d")))
x_Montana[,"time"] <- (x_Montana[,"time"]-min(x_Montana[,"time"]))/(max(x_Montana[,"time"])-
                                                                      min(x_Montana[,"time"]))

#Zermatt
x_Zermatt          <- data.frame("time"=temp_max_Zermatt[,2],
                                 "nao"=nao,
                                 "d"=season_day,
                                 "temp"=temp_max_Zermatt[,3])

as.numeric.factor  <- function(x) {as.numeric(levels(x))[x]}
x_Zermatt[,"temp"] <- as.numeric(x_Zermatt[,"temp"])
x_Zermatt[,"time"] <- as.numeric(year(as.POSIXlt(x_Zermatt[,"time"], format="%Y-%m-%d")))
x_Zermatt[,"time"] <- (x_Zermatt[,"time"]-min(x_Zermatt[,"time"]))/(max(x_Zermatt[,"time"])-
                                                                      min(x_Zermatt[,"time"]))

Z <- data.frame("Montana"=x_Montana[,"temp"] , "Zermatt"=x_Zermatt[,"temp"], "NAO"=x_Zermatt[,"NAO"])
```

### (b) Represent the data and especially scatterplots of Zermatt values against Montana's values. Same with Montana values against NAO values. Comment.
::: panel-tabset
### Scatterplot Zermatt vs Montana temperature
```{r}
# Scatterplot of Zermatt values against Montana values
plot(Z$Montana, Z$Zermatt, xlab = "Montana Temperature", ylab = "Zermatt Temperature", 
     main = "Zermatt vs Montana Temperatures")
abline(lm(Z$Zermatt ~ Z$Montana), col = "red") 
legend("topright", 
       legend = "Fitted Regression Line", 
       col = "red", 
       lty = 1, 
       cex = 0.8)
```

### Scatterplot Montana temperature vs NAO values 
```{r}
# Scatterplot of Montana values against NAO values
plot(Z$Montana, Z$NAO, xlab = "Montana Temperature", ylab = "NAO Index", 
     main = "Montana Temperature vs NAO Index")
abline(lm(Z$NAO ~ Z$Montana), col = "red") # Add a linear regression line
legend("topright", 
       legend = "Fitted Regression", 
       col = "red", 
       lty = 1, 
       cex = 0.8)
```
:::

-   **Zermatt vs Montana Temperatures**: scatterplot displays a discernible pattern, indicating a positive correlation between the temperatures in Zermatt and Montana. The red line, which delineates the linear regression model applied to the data, closely follows the trajectory of the data points. This suggests a robust positive linear association between the temperatures recorded in the two regions.

-   **Montana Temperature vs NAO Index:** scatterplot presents a dense concentration of data points that do exhibit a slight upward trend. The red line, which represents the fitted linear regression model, appears to be horizontal, suggesting little linear relationship between the temperature in Montana and the NAO Index. The slightly positive slope in the regression line implies that, based on this model, changes in the NAO Index correspond to predictable or significant changes in Montana's temperature. This could indicate that the NAO Index may be a predictor of temperature in Montana. 

### (c) Test the correlation between these two pairs of series.
::: panel-tabset
### Zermatt vs Montana
```{r}
cor_Zermatt_Montana <- cor(Z$Zermatt, Z$Montana)
cat("Correlation between Zermatt and Montana Temperatures:", cor_Zermatt_Montana, "\n")
cor.test(Z$Zermatt, Z$Montana)
```

### Montana temperature vs NAO values 
```{r}
# Correlation between Montana Temperatures and NAO Index
cor_Montana_NAO <- cor(Z$Montana, Z$NAO)
cat("Correlation between Montana Temperatures and NAO Index:", cor_Montana_NAO, "\n")
# correlation test 
cor.test(Z$Montana, Z$NAO) # significant 

```
:::

- Correlation between Montana and Zermatt temperatures: correlation coefficient of 0.95 underscores an exceptionally strong positive relationship, consistent with the anticipation of a significant linkage between their climatic patterns. The statistical significance of this correlation has been affirmed by the `cor.test`, solidifying the inference that the temperatures in these two regions move in a closely synchronized manner. 
- Correlation between Montana and NAO: observed to be 0.25. This represents a relatively weak positive correlation, suggesting that while there is some degree of association between the two variables, it is not substantial. `cor.test` indicated that the correlation is also significant. 

### (d) Now concentrate on the extreme level and tail dependence. Represent χ and χ̄ for two pairs of series (Montana vs Zermatt and Montana vs NAO). You may want to use the function chiplot of the package evd. What do you observe? 
::: panel-tabset
### Zermatt vs Montana 
```{r}
# Create a data frame for Zermatt vs Montana Temperatures
data_Zermatt_Montana <- data.frame(Zermatt = Z$Zermatt, Montana = Z$Montana)

# Chi Plot - Zermatt vs Montana Temperatures
chiplot(data_Zermatt_Montana, main1 = "Chi Plot - Zermatt vs Montana Temperatures")

```
### Montana vs NAO index 
```{r}
# Create a data frame for Montana Temperatures vs NAO Index
data_Montana_NAO <- data.frame(Montana = Z$Montana, NAO = Z$NAO)

# Chi Plot - Montana Temperatures vs NAO Index
chiplot(data_Montana_NAO, main1 = "Chi Plot - Montana Temperatures vs NAO Index")
```
:::
- **Chi Bar Plot of Zermatt vs Montana temperatures**: indicates the existence of tail dependence, revealing that there is a significant relationship between their extreme values. The plot demonstrates a consistent deviation from zero across all quantiles, with the measure of dependence (lambda) increasing towards 1. This pattern suggests that the extreme temperatures in Zermatt and Montana are not independent but rather exhibit a linked behavior, particularly in the tails of their respective distributions. 

- **Chi Bar Plot of Montana vs NAO**: suggests an absence of tail dependence, as evidenced by the lambda statistic equating to zero. The plot's trajectory hovers around the zero mark, indicating that the two variables are likely to act independently at their extremes. Consequently, this implies that extreme values in Montana's temperatures and the NAO indices do not occur in conjunction and thus do not exhibit simultaneous extreme behavior.


## Part 2

### (a) Read in the data. Then, plot the raw prices (Adj.Close) of both stocks. Discuss the stationarity assumption.
```{r 2a}
engie <- read.csv(here::here("data/practical_3/engie.csv"))
veolia <- read.csv(here::here("data/practical_3/veolia.csv"))

# Data cleaning and plot
engie <- engie[-c(4456, 4489), ]
veolia <- veolia[-c(4456, 4489), ]

engie$Adj.Close <- as.numeric(engie$Adj.Close)
veolia$Adj.Close <- as.numeric(veolia$Adj.Close)

par(mfrow = c(1,2))
plot(engie$Adj.Close)
plot(veolia$Adj.Close)

# ADF test to asses the stationarity
adf_engie <- adf.test(engie$Adj.Close) #p-value = 0.4466
adf_veolia <- adf.test(veolia$Adj.Close)#p-value = 0.8228

```
Since our p-value is higher that 0.05 for both data sets, we cannot reject the null hypothesis of non-stationarity of the time series.

### (b) First, compute and plot the negative log returns in independent plots. Discuss the dates of occurrence of extreme events. Then, produce a scatterplot of the negative log returns of both stocks and discuss their (visual) dependence.

```{r}
# Create log return function
calculate_log_returns <- function(stocks) {
  log_returns <- -diff(log(stocks))
  return(log_returns)
}

# Calculate negative log returns for each index
log_returns_engie <- calculate_log_returns(engie$Adj.Close) 
plot(log_returns_engie)

log_returns_veolia <- calculate_log_returns(veolia$Adj.Close) 
plot(log_returns_veolia)

plot_engie <- plot_ly(x = engie$Date, y = engie$Adj.Close, type = "scatter", mode = "point", name = "Engie") %>%
  layout(title = "Engie")

plot_veolia <- plot_ly(x = veolia$Date, y = veolia$Adj.Close, type = "scatter", mode = "point", name = "Veolia") %>%
  layout(title = "Veolia")

combined_plot_2 <- subplot(plot_engie, plot_veolia)

layout(combined_plot_2, title = "Comparison of stock indices")

df_log_returns <- data.frame(log_returns_engie, log_returns_veolia)
```

At first sight, we see that the log returns of the indices for both companies follow a similar trend, the extremes happened at more or less same periods and the volatility is very high. The extreme events happened in 2008 (subprime crisis), 2012-2013 (european energy crisis), 2020 (COVID-19), and 2022 (Energy crisis).

```{r}
# Drawing a scatter plot
par(pty="s")
scatter.smooth(x = log_returns_engie, y = log_returns_veolia, xlab = "Engie negative log returns", ylab = "Veolia negative log returns")
```

Our scatter plot shows a strong dependance between the negative log returns. No heavy tails displayed, and the shape is close to eliptical.

### (c) Plot the pseudo-samples obtained from estimating the marginal distributions by their empirical CDFs.

```{r}

# We compute and show the CDF for both negative log returns 
cdf_engie <- ecdf(log_returns_engie)
cdf_veolia <- ecdf(log_returns_veolia)

plot(cdf_engie, col = "red", main = "Empirical Cumulative Distributions")
lines(cdf_veolia, col ="blue")

legend("bottomright", legend = c("Engie", "Veolia"), col = c("red", "blue"), lty = 1)

# Probabilities for cdf_engie and cdf_veoila
u1 <- pobs(log_returns_engie)
u2 <- pobs(log_returns_veolia)
data <- data.frame(engie_prob = u1, veolia_prob = u2)
data_matrix <- as.matrix(data)

pairs.panels(data, method = "kendall")

```

We can see that both empirical cumulative distribution functions are very similar for both Veolia and Engie. The Kendall method plot shows us a correlation coefficient of 0.42, indicating a fairly high correlation

### (d) Fit a Gaussian, a t, a Gumbel and a Clayton copula to the data. Select the copula model using an information criterion, such as the AIC.

```{r}
# Fit Gaussian copula
gaussian_copula <- normalCopula(dim = 2)
fit_gaussian <- fitCopula(gaussian_copula, data, method = "mpl")

# Fit t copula
t_copula <- tCopula(dim = 2, df = 3)
fit_t <- fitCopula(t_copula, data, method = "mpl")

# Fit Gumbel copula
gumbel_copula <- gumbelCopula(dim = 2)
fit_gumbel <- fitCopula(gumbel_copula, data, method = "mpl")

# Fit Clayton copula
clayton_copula <- claytonCopula(dim = 2, param = 2)   
fit_clayton <- fitCopula(clayton_copula, data, method = "mpl")

# Calculate AIC values
aic_values <- AIC(fit_gaussian, fit_t, fit_gumbel, fit_clayton)
aic_values
min(aic_values$AIC) ###the t distribution fits the best our data


BiCopSelect(data[,1], data[,2], familyset=NA)
```

From the AIC results, we can conclude that the t copula is the best one for our data.

### (e) Compute the theoretical tail dependence coefficients for the copulae fitted in (d), using the parameters obtained above.

```{r}
#Compute the tail dependence parameters through BiCopPar2TailDep and lambda functions
BiCopPar2TailDep(family = 2, par = fit_t@copula@parameters[1], par2 = fit_t@copula@parameters[2])

```

We obtain a lower and upper tail dependence of approximately 0.327 for both, which makes sense since the chosen copula is a t-copula (symmetric distribution). This indicates that there is a positive correlation between the extreme values of Engie and Veolia.

### (f) Compute the non-parametric estimators of the tail dependence coefficients obtained from the data. Are these estimates close to the theoretical ones obtained with the best model selected in (d)?

```{r}

lambda(fit_t@copula)
fitLambda(data_matrix, method = "t", lower.tail = F)

chiplot(df_log_returns)
```

From the results of `fitLambda`, we can observe very similar results to the t-copulae. To ensure these results, we drew a chi plot, which graphically seems to confirm these results. From this information, and the previously done work, we can conclude that there is a positive dependance between the extreme events of Engie and Veolia's stocks.