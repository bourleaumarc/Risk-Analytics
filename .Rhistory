# Scraping discounted price information
discounts <- url_html %>%
html_nodes("div.b-product-grid-tile-outer.js-product-tiles div div div div.b-product-tile-info-container div a div.b-product-tile-price div span:nth-child(2) span") %>%
html_text() %>%
str_remove_all("\n") %>%
str_remove_all("CHF ") %>%
str_replace_all(",", ".") %>%
as.numeric()
# Scraping original price information
prices <- url_html %>%
html_nodes("div.b-product-grid-tile-outer.js-product-tiles div div div div.b-product-tile-info-container div a div.b-product-tile-price div span.b-product-tile-price-outer.b-product-tile-price-outer--line-through span") %>%
html_text() %>%
str_remove_all("\n") %>%
str_remove_all("CHF ") %>%
str_replace_all(",", ".") %>%
as.numeric()
# Create a data frame with brand and name columns
snipes_df <- data.frame(brand = brand_text, name = name_text, original_price = prices, discounted_prices = discounts)
}
snipes_df <- scrap_data_fun(url)
View(snipes_df)
View(snipes_df)
library(ggplot2)
# Calculate absolute discount
snipes_df <- snipes_df %>%
mutate(absolute_discount = original_price - discounted_price)
# Calculate absolute discount
snipes_df <- snipes_df %>%
mutate(absolute_discount = original_price - discounted_prices)
# Generate scatter plot
ggplot(snipes_df, aes(x = original_price, y = absolute_discount, color = brand)) +
geom_point() +
labs(x = "Original Price", y = "Absolute Discount", title = "Discounts by Original Price and Brand") +
theme_minimal() +
scale_color_discrete(name = "Brand") # Adjust the name of the legend if needed
library(plotly)
# Calculate absolute discount
snipes_df <- snipes_df %>%
mutate(absolute_discount = original_price - discounted_prices)
# Generate ggplot
p <- ggplot(snipes_df, aes(x = original_price, y = absolute_discount, color = brand)) +
geom_point() +
labs(x = "Original Price", y = "Absolute Discount", title = "Discounts by Original Price and Brand") +
theme_minimal() +
scale_color_discrete(name = "Brand") # Adjust the name of the legend if needed
# Convert to an interactive plotly object
ggplotly(p)
# Calculate absolute discount
snipes_df <- snipes_df %>%
mutate(absolute_discount = discounted_prices - original_price)
# Generate ggplot
p <- ggplot(snipes_df, aes(x = original_price, y = absolute_discount, color = brand)) +
geom_point() +
labs(x = "Original Price", y = "Absolute Discount", title = "Discounts by Original Price and Brand") +
theme_minimal() +
scale_color_discrete(name = "Brand") # Adjust the name of the legend if needed
# Convert to an interactive plotly object
ggplotly(p)
write.csv(snipes_df, "snipes_data.csv", row.names = FALSE)
=======
rlci<- data.frame(Lower_CI = numeric(), return_level = numeric(), Upper_CI = numeric())
B <- 3
return_level <- numeric(B)
for (i in 1:13){
for(j in 1:B){
data <- rgev(70, loc = gev_time_varying_location_shape$results$par[1] + gev_time_varying_location_shape$results$par[2] * (70+i), scale = gev_time_varying_location_shape$results$par[3], shape = gev_time_varying_location_shape$results$par[4] + gev_time_varying_location_shape$results$par[5] * (70+i))
fit <- fevd(data, venice_max, type = "GEV", time.units = "year", shape.fun = ~ yy, location.fun =  ~ yy)
return_level[j] <- qgev(1 - 1/13, location = fit$results$par[1] + fit$results$par[2] * (70+i), scale = fit$results$par[3], shape = fit$results$par[4] + fit$results$par[5] * (70+i))
}
rt <- mean(return_level)
rtl <- quantile(return_level, probs = 0.025)
rtu <- quantile(return_level, probs = 0.975)
rlci <- rbind(rlci, data.frame(Lower_CI = rtl, return_level = rt, Upper_CI = rtu))
}
rlci<- data.frame(Lower_CI = numeric(), return_level = numeric(), Upper_CI = numeric())
B <- 3
return_level <- numeric(B)
for (i in 1:3){
for(j in 1:B){
data <- suppressWarnings(rgev(70, loc = gev_time_varying_location_shape$results$par[1] + gev_time_varying_location_shape$results$par[2] * (70+i), scale = gev_time_varying_location_shape$results$par[3], shape = gev_time_varying_location_shape$results$par[4] + gev_time_varying_location_shape$results$par[5] * (70+i)))
fit <- suppressWarnings(fevd(data, venice_max, type = "GEV", time.units = "year", shape.fun = ~ yy, location.fun =  ~ yy))
return_level[j] <- qgev(1 - 1/13, location = fit$results$par[1] + fit$results$par[2] * (70+i), scale = fit$results$par[3], shape = fit$results$par[4] + fit$results$par[5] * (70+i))
}
rt <- mean(return_level)
rtl <- quantile(return_level, probs = 0.025)
rtu <- quantile(return_level, probs = 0.975)
rlci <- rbind(rlci, data.frame(Lower_CI = rtl, return_level = rt, Upper_CI = rtu))
}
rlci<- data.frame(Lower_CI = numeric(), return_level = numeric(), Upper_CI = numeric())
B <- 3
return_level <- numeric(B)
for (i in 1:5){
for(j in 1:B){
data <- suppressWarnings(rgev(70, loc = gev_time_varying_location_shape$results$par[1] + gev_time_varying_location_shape$results$par[2] * (70+i), scale = gev_time_varying_location_shape$results$par[3], shape = gev_time_varying_location_shape$results$par[4] + gev_time_varying_location_shape$results$par[5] * (70+i)))
fit <- suppressWarnings(fevd(data, venice_max, type = "GEV", time.units = "year", shape.fun = ~ yy, location.fun =  ~ yy))
return_level[j] <- qgev(1 - 1/13, location = fit$results$par[1] + fit$results$par[2] * (70+i), scale = fit$results$par[3], shape = fit$results$par[4] + fit$results$par[5] * (70+i))
}
rt <- mean(return_level)
rtl <- quantile(return_level, probs = 0.025)
rtu <- quantile(return_level, probs = 0.975)
rlci <- rbind(rlci, data.frame(Lower_CI = rtl, return_level = rt, Upper_CI = rtu))
}
rlci<- data.frame(return_level = numeric(), Lower_CI = numeric(), Upper_CI = numeric())
B <- 3
return_level <- numeric(B)
for (i in 1:5){
for(j in 1:B){
data <- suppressWarnings(rgev(70, loc = gev_time_varying_location_shape$results$par[1] + gev_time_varying_location_shape$results$par[2] * (70+i), scale = gev_time_varying_location_shape$results$par[3], shape = gev_time_varying_location_shape$results$par[4] + gev_time_varying_location_shape$results$par[5] * (70+i)))
fit <- suppressWarnings(fevd(data, venice_max, type = "GEV", time.units = "year", shape.fun = ~ yy, location.fun =  ~ yy))
return_level[j] <- qgev(1 - 1/13, location = fit$results$par[1] + fit$results$par[2] * (70+i), scale = fit$results$par[3], shape = fit$results$par[4] + fit$results$par[5] * (70+i))
}
rt <- mean(return_level)
rtl <- quantile(return_level, probs = 0.025)
rtu <- quantile(return_level, probs = 0.975)
rlci <- rbind(rlci, data.frame(return_level = rt, Lower_CI = rtl, Upper_CI = rtu))
}
rlci<- data.frame(return_level = numeric(), Lower_CI = numeric(), Upper_CI = numeric())
B <- 20
return_level <- numeric(B)
for (i in 1:13){
for(j in 1:B){
data <- suppressWarnings(rgev(70, loc = gev_time_varying_location_shape$results$par[1] + gev_time_varying_location_shape$results$par[2] * (70+i), scale = gev_time_varying_location_shape$results$par[3], shape = gev_time_varying_location_shape$results$par[4] + gev_time_varying_location_shape$results$par[5] * (70+i)))
fit <- suppressWarnings(fevd(data, venice_max, type = "GEV", time.units = "year", shape.fun = ~ yy, location.fun =  ~ yy))
return_level[j] <- qgev(1 - 1/13, location = fit$results$par[1] + fit$results$par[2] * (70+i), scale = fit$results$par[3], shape = fit$results$par[4] + fit$results$par[5] * (70+i))
}
rt <- mean(return_level)
rtl <- quantile(return_level, probs = 0.025)
rtu <- quantile(return_level, probs = 0.975)
rlci <- rbind(rlci, data.frame(return_level = rt, Lower_CI = rtl, Upper_CI = rtu))
}
fit
rlci<- data.frame(return_level = numeric(), Lower_CI = numeric(), Upper_CI = numeric())
B <- 1
return_level <- numeric(B)
for (i in 1:1){
for(j in 1:B){
data <- suppressWarnings(rgev(70, loc = gev_time_varying_location_shape$results$par[1] + gev_time_varying_location_shape$results$par[2] * (70+i), scale = gev_time_varying_location_shape$results$par[3], shape = gev_time_varying_location_shape$results$par[4] + gev_time_varying_location_shape$results$par[5] * (70+i)))
fit <- suppressWarnings(fevd(data, venice_max, type = "GEV", time.units = "year", shape.fun = ~ yy, location.fun =  ~ yy))
return_level[j] <- qgev(1 - 1/13, location = fit$results$par[1] + fit$results$par[2] * (70+i), scale = fit$results$par[3], shape = fit$results$par[4] + fit$results$par[5] * (70+i))
}
rt <- mean(return_level)
rtl <- quantile(return_level, probs = 0.025)
rtu <- quantile(return_level, probs = 0.975)
rlci <- rbind(rlci, data.frame(return_level = rt, Lower_CI = rtl, Upper_CI = rtu))
}
rlci<- data.frame(return_level = numeric(), Lower_CI = numeric(), Upper_CI = numeric())
B <- 1
return_level <- numeric(B)
for (i in 1:1){
for(j in 1:B){
data <- suppressWarnings(rgev(70, loc = gev_time_varying_location_shape$results$par[1] + gev_time_varying_location_shape$results$par[2] * (70+i), scale = gev_time_varying_location_shape$results$par[3], shape = gev_time_varying_location_shape$results$par[4] + gev_time_varying_location_shape$results$par[5] * (70+i)))
fit <- suppressWarnings(fevd(data, venice_max, type = "GEV", time.units = "year", shape.fun = ~ yy, location.fun =  ~ yy))
return_level[j] <- qgev(1 - 1/13, location = fit$results$par[1] + fit$results$par[2] * (70+i), scale = fit$results$par[3], shape = fit$results$par[4] + fit$results$par[5] * (70+i))
}
rt <- mean(return_level)
rtl <- quantile(return_level, probs = 0.025)
rtu <- quantile(return_level, probs = 0.975)
rlci <- rbind(rlci, data.frame(return_level = rt, Lower_CI = rtl, Upper_CI = rtu))
}
fit
rlci<- data.frame(return_level = numeric(), Lower_CI = numeric(), Upper_CI = numeric())
B <- 1
return_level <- numeric(B)
for (i in 71:83){
for(j in 1:B){
data <- suppressWarnings(rgev(70, loc = gev_time_varying_location_shape$results$par[1] + gev_time_varying_location_shape$results$par[2] * i, scale = gev_time_varying_location_shape$results$par[3], shape = gev_time_varying_location_shape$results$par[4] + gev_time_varying_location_shape$results$par[5] * i))
fit <- suppressWarnings(fevd(data, venice_max, type = "GEV", time.units = "year", shape.fun = ~ yy, location.fun =  ~ yy))
return_level[j] <- qgev(1 - 1/13, location = fit$results$par[1] + fit$results$par[2] * i, scale = fit$results$par[3], shape = fit$results$par[4] + fit$results$par[5] * i)
}
rt <- mean(return_level)
rtl <- quantile(return_level, probs = 0.025)
rtu <- quantile(return_level, probs = 0.975)
rlci <- rbind(rlci, data.frame(return_level = rt, Lower_CI = rtl, Upper_CI = rtu))
}
rlci<- data.frame(return_level = numeric(), Lower_CI = numeric(), Upper_CI = numeric())
B <- 1
return_level <- numeric(B)
for (i in 71:71){
for(j in 1:B){
data <- suppressWarnings(rgev(70, loc = gev_time_varying_location_shape$results$par[1] + gev_time_varying_location_shape$results$par[2] * i, scale = gev_time_varying_location_shape$results$par[3], shape = gev_time_varying_location_shape$results$par[4] + gev_time_varying_location_shape$results$par[5] * i))
fit <- suppressWarnings(fevd(data, venice_max, type = "GEV", time.units = "year", shape.fun = ~ yy, location.fun =  ~ yy))
return_level[j] <- qgev(1 - 1/13, location = fit$results$par[1] + fit$results$par[2] * i, scale = fit$results$par[3], shape = fit$results$par[4] + fit$results$par[5] * i)
}
rt <- mean(return_level)
rtl <- quantile(return_level, probs = 0.025)
rtu <- quantile(return_level, probs = 0.975)
rlci <- rbind(rlci, data.frame(return_level = rt, Lower_CI = rtl, Upper_CI = rtu))
}
rlci<- data.frame(return_level = numeric(), Lower_CI = numeric(), Upper_CI = numeric())
B <- 1
return_level <- numeric(B)
for (i in 1:1){
for(j in 1:B){
data <- suppressWarnings(rgev(70, loc = gev_time_varying_location_shape$results$par[1] + gev_time_varying_location_shape$results$par[2] * (70+i), scale = gev_time_varying_location_shape$results$par[3], shape = gev_time_varying_location_shape$results$par[4] + gev_time_varying_location_shape$results$par[5] * (70+i)))
fit <- suppressWarnings(fevd(data, venice_max, type = "GEV", time.units = "year", shape.fun = ~ yy, location.fun =  ~ yy))
return_level[j] <- qgev(1 - 1/13, location = fit$results$par[1] + fit$results$par[2] * (70+i), scale = fit$results$par[3], shape = fit$results$par[4] + fit$results$par[5] * (70+i))
}
rt <- mean(return_level)
rtl <- quantile(return_level, probs = 0.025)
rtu <- quantile(return_level, probs = 0.975)
rlci <- rbind(rlci, data.frame(return_level = rt, Lower_CI = rtl, Upper_CI = rtu))
}
rlci<- data.frame(return_level = numeric(), Lower_CI = numeric(), Upper_CI = numeric())
B <- 10
return_level <- numeric(B)
for (i in 1:1){
for(j in 1:B){
data <- suppressWarnings(rgev(70, loc = gev_time_varying_location_shape$results$par[1] + gev_time_varying_location_shape$results$par[2] * (70+i), scale = gev_time_varying_location_shape$results$par[3], shape = gev_time_varying_location_shape$results$par[4] + gev_time_varying_location_shape$results$par[5] * (70+i)))
fit <- suppressWarnings(fevd(data, venice_max, type = "GEV", time.units = "year", shape.fun = ~ yy, location.fun =  ~ yy))
return_level[j] <- qgev(1 - 1/13, location = fit$results$par[1] + fit$results$par[2] * (70+i), scale = fit$results$par[3], shape = fit$results$par[4] + fit$results$par[5] * (70+i))
}
rt <- mean(return_level)
rtl <- quantile(return_level, probs = 0.025)
rtu <- quantile(return_level, probs = 0.975)
rlci <- rbind(rlci, data.frame(return_level = rt, Lower_CI = rtl, Upper_CI = rtu))
}
rlci<- data.frame(ID = c(1:13), return_level = numeric(), Lower_CI = numeric(), Upper_CI = numeric())
rlci<- data.frame(return_level = numeric(), Lower_CI = numeric(), Upper_CI = numeric())
B <- 5
return_level <- numeric(B)
for (i in 1:13){
for(j in 1:B){
data <- suppressWarnings(rgev(70, loc = gev_time_varying_location_shape$results$par[1] + gev_time_varying_location_shape$results$par[2] * (70+i), scale = gev_time_varying_location_shape$results$par[3], shape = gev_time_varying_location_shape$results$par[4] + gev_time_varying_location_shape$results$par[5] * (70+i)))
fit <- suppressWarnings(fevd(data, venice_max, type = "GEV", time.units = "year", shape.fun = ~ yy, location.fun =  ~ yy))
return_level[j] <- qgev(1 - 1/13, location = fit$results$par[1] + fit$results$par[2] * (70+i), scale = fit$results$par[3], shape = fit$results$par[4] + fit$results$par[5] * (70+i))
}
rt <- mean(return_level)
rtl <- quantile(return_level, probs = 0.025)
rtu <- quantile(return_level, probs = 0.975)
rlci <- rbind(rlci, data.frame(return_level = rt, Lower_CI = rtl, Upper_CI = rtu))
}
gev_time_varying_location_shape
data <- suppressWarnings(rgev(70, loc = gev_time_varying_location_shape$results$par[1] + gev_time_varying_location_shape$results$par[2] * (70+i), scale = gev_time_varying_location_shape$results$par[3], shape = gev_time_varying_location_shape$results$par[4] + gev_time_varying_location_shape$results$par[5] * (70+i)))
data
>>>>>>> Stashed changes
# Load necessary libraries
library(readr)
library(dplyr)
library(lubridate)
# Read in the data
night_max <- read_csv(here::here("data/nightmax.csv"))  # Replace "nightmax.csv" with the actual file name
night_min <- read_csv("nightmin.csv")
library(readr)
niveau <- read((here::here("data/niveau.Rdata"))
load("~/Desktop/GitHub/Risk-Analytics/data/niveau.Rdata")
library(readr)
> load("~/Desktop/GitHub/Risk-Analytics/data/niveau.Rdata")
library(readr)
load("~/Desktop/GitHub/Risk-Analytics/data/niveau.Rdata")
library(readr)
niveau1 <- load("~/Desktop/GitHub/Risk-Analytics/data/niveau.Rdata")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
niveau1 <- load("~/Desktop/GitHub/Risk-Analytics/data/niveau.Rdata")
library(readr)
load("~/Desktop/GitHub/Risk-Analytics/data/niveau.Rdata")
niveau$Zeitstempel <- as.Date(niveau$Zeitstempel)
niveau$Zeitstempel <- as.Date(niveau$Zeitstempel)
niveau$Zeitpunkt_des_Auftretens <- as.Date(niveau$Zeitpunkt_des_Auftretens)
niveau$Zeitstempel <- as.Date(niveau$Zeitstempel)
niveau$Zeitpunkt_des_Auftretens <- as.Date(niveau$Zeitpunkt_des_Auftretens)
# Plot time series
plot(niveau$Zeitstempel, niveau$Wert, type = 'l', xlab = 'Date', ylab = 'Water Level (m)',
main = 'Time Series Plot of Water Levels')
# Assuming df is your data frame
high_water_levels <- niveau[niveau$Wert > 328, ]
niveau$Zeitstempel <- as.Date(niveau$Zeitstempel)
niveau$Zeitpunkt_des_Auftretens <- as.Date(niveau$Zeitpunkt_des_Auftretens)
# Plot time series
plot(niveau$Zeitstempel, niveau$Wert, type = 'l', xlab = 'Date', ylab = 'Water Level (m)',
main = 'Time Series Plot of Water Levels')
# Assuming df is your data frame
high_water_levels <- niveau[niveau$Wert > 328, ]
times_of_high_levels <- high_water_levels$Zeitstempel
cat("Times when water level is above 328:", times_of_high_levels, "\n")
cat("Times when water level is above 328:", times_of_high_levels, "\n")
# Assuming df is your data frame
high_water_levels <- niveau[niveau$Wert > 328, ]
times_of_high_levels <- high_water_levels$Zeitstempel
high_water_levels$Zeitstempel
# Assuming df is your data frame
high_water_levels <- niveau[niveau$Wert > 328, ]
TOHL <- high_water_levels$Zeitstempel
cat("Times when water level is above 328:", TOHL, "\n")
niveau$Zeitstempel <- as.Date(niveau$Zeitstempel)
niveau$Zeitpunkt_des_Auftretens <- as.Date(niveau$Zeitpunkt_des_Auftretens)
# Plot time series
plot(niveau$Zeitstempel, niveau$Wert, type = 'l', xlab = 'Date', ylab = 'Water Level (m)',
main = 'Time Series Plot of Water Levels')
# Assuming df is your data frame
high_water_levels <- niveau[niveau$Wert > 328, ]
TOHL <- high_water_levels$Zeitstempel
cat("Times when water level is above 328:", "TOH"L, "\n")
niveau$Zeitstempel <- as.Date(niveau$Zeitstempel)
niveau$Zeitpunkt_des_Auftretens <- as.Date(niveau$Zeitpunkt_des_Auftretens)
# Plot time series
plot(niveau$Zeitstempel, niveau$Wert, type = 'l', xlab = 'Date', ylab = 'Water Level (m)',
main = 'Time Series Plot of Water Levels')
# Assuming df is your data frame
high_water_levels <- niveau[niveau$Wert > 328, ]
TOHL <- high_water_levels$Zeitstempel
TOHL
# (b) Display a histogram of water levels
hist(niveau$Wert, breaks = 30, col = 'skyblue', border = 'black',
main = 'Histogram of Water Levels', xlab = 'Water Level (m)', ylab = 'Frequency')
# (b) Display a histogram of water levels
hist(niveau$Wert, breaks = 23, col = 'skyblue', border = 'black',
main = 'Histogram of Water Levels', xlab = 'Water Level (m)', ylab = 'Frequency')
# (b) Display a histogram of water levels
hist(niveau$Wert, breaks = 10, col = 'skyblue', border = 'black',
main = 'Histogram of Water Levels', xlab = 'Water Level (m)', ylab = 'Frequency')
# (b) Display a histogram of water levels
hist(niveau$Wert, breaks = 40, col = 'skyblue', border = 'black',
main = 'Histogram of Water Levels', xlab = 'Water Level (m)', ylab = 'Frequency')
# (b) Display a histogram of water levels
hist(niveau$Wert, breaks = 23, col = 'skyblue', border = 'black',
main = 'Histogram of Water Levels', xlab = 'Water Level (m)', ylab = 'Frequency')
# (b) Display a histogram of water levels
hist(niveau$Wert, breaks = 23, col = 'skyblue', border = 'black',
main = 'Histogram of Water Levels', xlab = 'Water Level (m)', ylab = 'Frequency')
(c) Peaks-over-threshold approach
# Choose a threshold (adjust as needed)
threshold <- quantile(niveau$Wert, 0.95)
exceedances <- niveau$Wert[niveau$Wert > threshold]
# Fit Generalized Pareto Distribution to exceedances
fit <- fevd(exceedances, type = 'GP')
library(extRemes)
# Choose a threshold (adjust as needed)
threshold <- quantile(niveau$Wert, 0.95)
exceedances <- niveau$Wert[niveau$Wert > threshold]
# Fit Generalized Pareto Distribution to exceedances
fit <- fevd(exceedances, type = 'GP')
# Choose a threshold (adjust as needed)
threshold <- quantile(niveau$Wert, 0.95)
exceedances <- niveau$Wert[niveau$Wert > threshold]
sum(is.na(niveau$Wert))
fit <- fevd(exceedances, type = 'GEV')
fit
# Fit Generalized Pareto Distribution to exceedances
fit <- fevd(exceedances, type = 'GP')
plot_mleE <- fevd(as.vector(exceedances), method = "MLE",  type="GP", threshold = threshold1)
# Choose a threshold (adjust as needed)
threshold1 <- quantile(niveau$Wert, 0.95)
exceedances <- niveau$Wert[niveau$Wert > threshold1]
plot_mleE <- fevd(as.vector(exceedances), method = "MLE",  type="GP", threshold = threshold1)
plot(plot_mleE)
plot_mleE
fit
library(extRemes)
# Choose a threshold (adjust as needed)
threshold1 <- quantile(niveau$Wert, 0.95)
exceedances <- niveau$Wert[niveau$Wert > threshold1]
# Fit Generalized Pareto Distribution to exceedances
fitMLE <- fevd(as.vector(exceedances), method = "MLE",  type="GP", threshold = threshold1)
plot(fitMLE)
fitMLE
e) Return levels computation
# Compute return levels for 50 and 100 years
return_50 <- qgum(1 - 1/50, fitMLE)
library(extRemes)
# Compute return levels for 50 and 100 years
return_50 <- qgum(1 - 1/50, fitMLE)
library(extRemes)
# Compute return levels for 50 and 100 years
return_50 <- qgev(1 - 1/50, fitMLE)
library(extRemes)
# Compute return levels for 50 and 100 years
return_50 <- qgev(1 - 1/50, fitMLE)
library(extRemes)
# Compute return levels for 50 and 100 years
return_50 <- qevd(1 - 1/50, fitMLE)
# Compute return levels for 50 and 100 years
return_50 <- qevd(fitMLE)
return_100 <- qevd(1 - 1/100, fitMLE)
return_100 <- qevd((1 - 1/100), fitMLE)
return_100 <- qevd(1 - 1/100, fitMLE)
# Compute return levels for 50 and 100 years
return_50 <- qevd(1-1/50, location = fitMLE$par.ests[1], scale = fitMLE$par.ests[2], shape = fitMLE$par.ests[3])
# Compute return levels for 50 and 100 years
return_50 <- qevd(1-1/50, scale = fitMLE$par.ests[2], shape = fitMLE$par.ests[3])
# Compute return levels for 50 and 100 years
return_50 <- qevd(1-1/50, scale = fitMLE$results[1], shape = fitMLE$results[2])
# Compute return levels for 50 and 100 years
return_50 <- qevd(1-1/50, scale = 1, shape = 1)
cat("50-year return level:", round(return_50, 2), "meters\n")
return_100 <- qevd(1 - 1/100, fitMLE)
return_100 <- qevd(1 - 1/100, scale = 1, shape = 1)
cat("100-year return level:", round(return_100, 2), "meters\n")
# Compute return levels for 50 and 100 years
return_50 <- qevd(1-1/50, scale = 0.4, shape = -0.07)
cat("50-year return level:", round(return_50, 2), "meters\n")
library(extRemes)
# Compute return levels for 50 and 100 years
return_50 <- qevd(1-1/50, scale = 0.4, shape = -0.07)
return_100 <- qevd(1 - 1/100, scale = 0.4, shape = -0.07)
cat("50-year return level:", round(return_50, 2), "meters\n")
cat("100-year return level:", round(return_100, 2), "meters\n")
# Assuming fit is the result from fitting a GPD using the POT approach
# Assuming exceedances is a vector containing the exceedances above the threshold
# (d) Clustering of extremes
# Clustering index
clustering_index <- clusteringIndex(exceedances)
# Clustering index
clustering_index <- clustering_index(exceedances)
# Assuming fit is the result from fitting a GPD using the POT approach
# Assuming exceedances is a vector containing the exceedances above the threshold
# (d) Clustering of extremes
library(extRemes)
# Clustering index
clustering_index <- clustering_index(exceedances)
# Assuming fit is the result from fitting a GPD using the POT approach
# Assuming exceedances is a vector containing the exceedances above the threshold
# (d) Clustering of extremes
library(extRemes)
library(evd)
# Clustering index
clustering_index <- extRemes::clustering_index(exceedances)
extremalindex(exceedances, threshold = threshold1)
extremalindex(exceedances, threshold = threshold1)
library(extRemes)
# Choose a threshold (adjust as needed)
threshold1 <- quantile(niveau$Wert, 0.95)
exceedances <- niveau$Wert[niveau$Wert > threshold1]
# Fit Generalized Pareto Distribution to exceedances
fitMLE <- fevd(as.vector(exceedances), method = "MLE",  type="GP", threshold = threshold1)
plot(fitMLE)
fitMLE
extremalindex(exceedances, threshold = threshold1)
extremalindex(niveau$Wert, threshold = threshold1)
library(extRemes)
# Choose a threshold (adjust as needed)
threshold1 <- quantile(niveau$Wert, 0.95)
exceedances <- niveau$Wert[niveau$Wert > 328]
# Fit Generalized Pareto Distribution to exceedances
fitMLE <- fevd(as.vector(exceedances), method = "MLE",  type="GP", threshold = threshold1)
plot(fitMLE)
fitMLE
library(extRemes)
# Choose a threshold (adjust as needed)
threshold1 <- quantile(niveau$Wert, 0.95)
exceedances <- niveau$Wert[niveau$Wert > threshold1]
# Fit Generalized Pareto Distribution to exceedances
fitMLE <- fevd(as.vector(exceedances), method = "MLE",  type="GP", threshold = threshold1)
plot(fitMLE)
fitMLE
extremalindex(niveau$Wert, threshold = threshold1)
1/0.14
max(niveau$Wert)
mean(niveau$Wert)
max(niveau$Wert)
threshold1 <- mean(niveau$Wert)
library(extRemes)
# Choose a threshold (adjust as needed)
quantile(niveau$Wert, 0.95)
exceedances <- niveau$Wert[niveau$Wert > threshold1]
# Fit Generalized Pareto Distribution to exceedances
fitMLE <- fevd(as.vector(exceedances), method = "MLE",  type="GP", threshold = threshold1)
plot(fitMLE)
fitMLE
extremalindex(niveau$Wert, threshold = threshold1)
max(niveau$Wert)
mean(niveau$Wert)
mrlplot(niveau$Wert)
threshrange.plot(niveau$Wert)
threshrange.plot(niveau$Wert, r=c(325,330))
mrlplot(niveau$Wert)
max(niveau$Wert)
mean(niveau$Wert)
mrlplot(niveau$Wert)
threshrange.plot(niveau$Wert, r=c(327,330))
threshrange.plot(niveau$Wert, r=c(327,330), nint = 20)
max(niveau$Wert)
mean(niveau$Wert)
mrlplot(niveau$Wert)
threshrange.plot(niveau$Wert, r=c(325,330), nint = 20)
library(extRemes)
# Choose a threshold (adjust as needed)
quantile(niveau$Wert, 0.95)
threshold1 = 328
exceedances <- niveau$Wert[niveau$Wert > threshold1]
# Fit Generalized Pareto Distribution to exceedances
fitMLE <- fevd(as.vector(exceedances), method = "MLE",  type="GP", threshold = threshold1)
plot(fitMLE)
fitMLE
library(extRemes)
# Choose a threshold (adjust as needed)
quantile(niveau$Wert, 0.95)
threshold1 = 327
exceedances <- niveau$Wert[niveau$Wert > threshold1]
# Fit Generalized Pareto Distribution to exceedances
fitMLE <- fevd(as.vector(exceedances), method = "MLE",  type="GP", threshold = threshold1)
plot(fitMLE)
fitMLE
extremalindex(niveau$Wert, threshold = threshold1)
library(extRemes)
# return levels for 50 and 100 years
return_50 <- qevd(1-1/50, scale = 0.4, shape = -0.07)
return_100 <- qevd(1 - 1/100, scale = 0.4, shape = -0.07)
cat("50-year return level:", round(return_50, 2), "meters\n")
cat("100-year return level:", round(return_100, 2), "meters\n")
niveau$Wert[niveau$Wert > threshold1]
quantile(niveau$Wert, 0.95)
quantile(niveau$Wert, 0.98)
fitMLE <- fevd(as.vector(exceedances), method = "MLE",  type="GP", threshold = threshold1)
plot(fitMLE)
extremalindex(niveau$Wert, threshold = threshold1)
exi(niveau$Wert, threshold=threshold1)
evd::exi(niveau$Wert, threshold=threshold1)
install.packages("evd")
evd::exi(niveau$Wert, threshold=threshold1)
?exi
evd::exi(niveau$Wert, u=threshold1)
