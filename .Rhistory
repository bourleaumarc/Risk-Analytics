mod2 <- gev.fit(max$maximum, max, mul=2)
mod2
1-pchisq(-2*(mod2$nllh-mod1$nllh),1) #chi-square test
# The trend is not significant, this is expected!
## Data example
## Reproduced from great walkthrough by Hugo Winter
## available at: https://younghydrologicsociety.files.wordpress.com/2018/04/eva_training_exercises_egu_2018.pdf
data(rain) #from ismev
years <- rep(1:48, rep(c(365,365,366,365), times = 12))[-17532]
rain.ann.max <- unlist(lapply(X = split(rain,years), FUN = max))
# annual maxima from this set of data in South-West England
# from extRemes package, can use fevd()
library(extRemes)
mod3 <- fevd(rain.ann.max, type="GEV", time.units="years")
plot(mod3)
mod3$results$par #gives parameters of the GEV
# suggest heavy-tailed model here, but only point estimates.
# What about building confidence intervals?
ci.fevd(mod3, alpha=0.05, type="parameter")
# the CI includes 0, so not sure we're that heavy-tailed
gev.rl <- return.level(x = mod3, return.period = c(10,100,1000,10000),
do.ci = TRUE, alpha = 0.05)
gev.rl
#notice the very wide CI for the 10000-year return level.
# We clearly do not have enough data and the uncertainty
# concerning the shape parameter drives this.
## How to compute return levels (by hand) using GEV
# e.g. in the rain example, compute the 10-year return level
# understand here: the value exceeded one out of every 10 365-days block (1 year)
# approximated by
as.numeric(mod3$results$par[1]+mod3$results$par[2]*((-log(1-1/10))^(-mod3$results$par[3])-1)/mod3$results$par[3])
# or, as it is the 1-1/k = 1-1/10th quantile
qgev(1-1/10, location=mod3$results$par[1], scale=mod3$results$par[2], shape=mod3$results$par[3])
obs <- rt(length(obs.date), df=1.5)
df <- data.frame(obs.date)
df <- data.frame(df, obs)
max <- data.frame(0, 0, 0)
years <- unique(year(df$obs.date))
months <- unique(month(df$obs.date))
for(i in 1:length(years)){
for(j in 1:length(months)){
subset <- df[(month(df$obs.date)==months[j])&(year(df$obs.date)==years[i]),]
max <- rbind(max, c(month=months[j], year=years[i], max(subset$obs)))
}
}
max <- max[-1, ]
colnames(max) <- c("month", "year", "maximum")
mod3$results$par #gives parameters of the GEV
mod3 <- fevd(rain.ann.max, type="GEV", time.units="years")
plot(mod3)
mod3$results$par #gives parameters of the GEV
ci.fevd(mod3, alpha=0.05, type="parameter")
par(mfrow = c(2, 2))  # Create a 2x2 grid of plots
par(oma = c(0, 0, 1, 0))
par(mar = c(5, 4, 3, 2))
pacf(log_returns_sp500)
par(mar = c(5, 4, 3, 2))
pacf(log_returns_cac40)
par(mar = c(5, 4, 3, 2))
pacf(log_returns_nasdaq)
par(mar = c(5, 4, 3, 2))
pacf(log_returns_nikkei)
par(mfrow = c(2, 2))  # Create a 2x2 grid of plots
par(oma = c(0, 0, 1, 0))
par(mar = c(5, 4, 3, 2))
pacf(log_returns_sp500)
par(mar = c(5, 4, 3, 2))
pacf(log_returns_cac40)
par(mar = c(5, 4, 3, 2))
pacf(log_returns_nasdaq)
par(mar = c(5, 4, 3, 2))
pacf(log_returns_nikkei)
knitr::opts_chunk$set(echo = TRUE)
library(ismev)
library(ismev)
data(venice90)
library(vgan)
library(VGAM)
install.packages("VGAM")
library(VGAM)
#install.packages("VGAM")
library(VGAM)
data("venice90")
library(ismev)
#install.packages("VGAM")
library(VGAM)
data("venice90")
View(venice90)
library(tidyverse)
venice90 %>% filter(sealevel> 140)
data("venice90")
venice90 %>% filter(sealevel> 140)
yearly-max <- venice90 %>% filter(sealevel> 140)
yearly_max <- venice90 %>% filter(sealevel> 140)
View(yearly_max)
yearly_max <- venice90 %>% group_by(year) %>% max(sealevel)
data("venice90")
yearly_max <- venice90 %>% group_by(year) %>% max(sealevel)
yearly_max <- venice90 %>% group_by(year) %>% max(sealevel)
yearly_max <- venice90 %>% group_by(year) %>% max(venice90$sealevel)
library(lubridate)
obs.date <- seq(from=as.Date("1993-01-01", format = "%Y-%m-%d"), to=as.Date("2022-12-31", format = "%Y-%m-%d"), by="day")
obs <- rt(length(obs.date), df=1.5)
df <- data.frame(obs.date)
df <- data.frame(df, obs)
max <- data.frame(0, 0, 0)
years <- unique(year(df$obs.date))
months <- unique(month(df$obs.date))
for(i in 1:length(years)){
for(j in 1:length(months)){
subset <- df[(month(df$obs.date)==months[j])&(year(df$obs.date)==years[i]),]
max <- rbind(max, c(month=months[j], year=years[i], max(subset$obs)))
}
}
View(max)
View(max)
View(subset)
??rbind
View(subset)
max_values <- data.frame(year = integer(0), max_value = double(0))
View(max_values)
venice <- data("venice90")
venice
venice <- data("venice90")
unique_years <- unique(venice$sealevel)
venice <- venice90
unique_years <- unique(venice$sealevel)
unique_years <- data.frame(unique(venice$sealevel))
View(unique_years)
unique_years <- data.frame(unique(venice$Year))
View(unique_years)
unique_years <- data.frame(unique(venice$year))
View(unique_years)
max_sea_levels <- venice %>%
group_by(year) %>%
summarise(max_sea_level = max(sea_level))
View(venice)
max_sea_levels <- venice %>%
group_by(year) %>%
summarise(max_sea_level = max(sealevel))
View(max_sea_levels)
View(max_sea_levels)
View(max_sea_levels)
result_row <- data.frame(year = year, max_sea_level = max_level)
max_level <- max(subset_data$sea_level)
for (year in unique_years) {
# Subset the data for the current year
subset_data <- venice[venice$year == year, ]
# Calculate the maximum sea level for the current year
max_level <- max(subset_data$sea_level)
# Create a data frame with the year and maximum sea level
result_row <- data.frame(year = year, max_sea_level = max_level)
# Append the result to the max_sea_levels data frame
max_sea_levels <- rbind(max_sea_levels, result_row)
}
View(subset_data)
knitr::opts_chunk$set(echo = TRUE)
library(ismev)
library(VGAM)
library(tidyverse)
library(plotly)
library(plotrix)
install.packages("plotrix")
knitr::opts_chunk$set(echo = TRUE)
library(ismev)
library(VGAM)
library(tidyverse)
library(plotly)
library(plotrix)
library(scales)
#QUESTION A
#Read the Data
venice <- venice90
venice_max <- venice %>%
group_by(year) %>%
summarise(max_sea_level = max(sealevel))
head(venice_max)
plot_ly(venice_max, x = ~year, y = ~max_sea_level, type = 'scatter', mode = 'markers', name = 'Max Value') %>% layout(title = "Maximum Value per year", xaxis = list(title="Year"), yaxis = list(title="Maximum Value"))  %>% add_segments(x = 1940, xend = 2009, y = 140, yend = 140, line = list(color = 'red', width = 2))
#QUESTION B
# making predictions with linear models (remainder)
mod1 <- lm(max_sea_level ~ year, data = venice_max)
summary(mod1)
# making predictions for 5 years
mod1_predict <- predict.lm(mod1,newdata=data.frame("year"=c(2010:2022)),se=T, interval = "confidence", level = 0.95)
mod1_predict
#QUESTION C
#Add the model in a data frame
venice_max_predict <- data.frame(
PredictedValues = mod1_predict
) %>%
mutate(year = c(2010:2022))
venice_max_predict
#Plot the confidence intervals
plotCI(x = venice_max_predict$year,
y = venice_max_predict$PredictedValues.fit.fit,
li = venice_max_predict$PredictedValues.fit.lwr,
ui = venice_max_predict$PredictedValues.fit.upr)
#Create a new dataframe for the extreme values of 2010 - 2022
max_real <- data.frame(year = c(2012, 2012, 2013, 2018, 2019, 2019, 2019, 2022), max_sea_level = c(143, 149, 143, 156, 187, 144, 154, 204))
ggplot() +
geom_ribbon(data = venice_max_predict, aes(x = venice_max_predict$year, ymin = venice_max_predict$PredictedValues.fit.lwr, ymax = venice_max_predict$PredictedValues.fit.upr), fill = "blue", alpha = 0.3) +
geom_point(data = max_real, aes(x = max_real$year, y = max_real$max_sea_level), colour = "red", alpha = 0.5) +
geom_point(data = venice_max_predict, aes(x = venice_max_predict$year, y = venice_max_predict$PredictedValues.fit.fit))+
labs(title = "Real extreme values from 2010 to 2022 versus predicted values' confidence intervals", x = "Sea Level", y = "Year")
ggplot() +
geom_ribbon(data = venice_max_predict, aes(x = year, ymin = PredictedValues.fit.lwr, ymax = PredictedValues.fit.upr), fill = "blue", alpha = 0.3) +
geom_point(data = max_real, aes(x = year, y = max_sea_level), colour = "red", alpha = 0.5) +
geom_point(data = venice_max_predict, aes(x = year, y = PredictedValues.fit.fit)) +
labs(title = "Real extreme values from 2010 to 2022 versus predicted values' confidence intervals", x = "Year", y = "Sea Level") +
scale_x_continuous(breaks = unique(c(venice_max_predict$year, max_real$year)))
#QUESTION C
#Add the model in a data frame
venice_max_predict <- data.frame(
PredictedValues = mod1_predict
) %>%
mutate(year = c(2010:2022))
venice_max_predict
#Plot the confidence intervals
plotCI(x = venice_max_predict$year,
y = venice_max_predict$PredictedValues.fit.fit,
li = venice_max_predict$PredictedValues.fit.lwr,
ui = venice_max_predict$PredictedValues.fit.upr)
#Create a new dataframe for the extreme values of 2010 - 2022
max_real <- data.frame(year = c(2012, 2012, 2013, 2018, 2019, 2019, 2019, 2022), max_sea_level = c(143, 149, 143, 156, 187, 144, 154, 204))
ggplot() +
geom_ribbon(data = venice_max_predict, aes(x = year, ymin = PredictedValues.fit.lwr, ymax = PredictedValues.fit.upr), fill = "blue", alpha = 0.3) +
geom_point(data = max_real, aes(x = year, y = max_sea_level), colour = "red", alpha = 0.5) +
geom_point(data = venice_max_predict, aes(x = year, y = PredictedValues.fit.fit)) +
labs(title = "Real extreme values from 2010 to 2022 versus predicted values' confidence intervals", x = "Year", y = "Sea Level") +
scale_x_continuous(breaks = unique(c(venice_max_predict$year, max_real$year)))
ggplot() +
geom_ribbon(data = venice_max_predict, aes(x = year, ymin = PredictedValues.fit.lwr, ymax = PredictedValues.fit.upr), fill = "blue", alpha = 0.3) +
geom_point(data = max_real, aes(x = year, y = max_sea_level), colour = "red", alpha = 0.5) +
geom_point(data = venice_max_predict, aes(x = year, y = PredictedValues.fit.fit)) +
labs(title = "Real extreme values from 2010 to 2022 versus predicted values' confidence intervals", x = "Year", y = "Sea Level") +
scale_x_continuous(breaks = unique(c(venice_max_predict$year, max_real$year)))
ggplot() +
geom_ribbon(data = venice_max_predict, aes(x = year, ymin = PredictedValues.fit.lwr, ymax = PredictedValues.fit.upr), fill = "blue", alpha = 0.3) +
geom_point(data = max_real, aes(x = year, y = max_sea_level, color = "Observed"), alpha = 0.5) +
geom_point(data = venice_max_predict, aes(x = year, y = PredictedValues.fit.fit, color = "Predicted"), shape = 1) +
labs(title = "Real extreme values from 2010 to 2022 versus predicted values' confidence intervals", x = "Year", y = "Sea Level") +
scale_x_continuous(breaks = unique(c(venice_max_predict$year, max_real$year))) +
scale_color_manual(name = "Data Type", values = c("Observed" = "red", "Predicted" = "black")) +
guides(color = guide_legend(override.aes = list(shape = c(NA, 1)), title = "Data Type"))
ggplot() +
geom_ribbon(data = venice_max_predict, aes(x = year, ymin = PredictedValues.fit.lwr, ymax = PredictedValues.fit.upr), fill = "blue", alpha = 0.3) +
geom_point(data = max_real, aes(x = year, y = max_sea_level, color = "Observed"), fill = "red", alpha = 0.5) +
geom_point(data = venice_max_predict, aes(x = year, y = PredictedValues.fit.fit, color = "Predicted"), shape = 1) +
labs(title = "Real extreme values from 2010 to 2022 versus predicted values' confidence intervals", x = "Year", y = "Sea Level") +
scale_x_continuous(breaks = unique(c(venice_max_predict$year, max_real$year))) +
scale_color_manual(name = "Data Type", values = c("Observed" = "red", "Predicted" = "black")) +
guides(color = guide_legend(override.aes = list(shape = c(NA, 1)), title = "Data Type"))
ggplot() +
geom_ribbon(data = venice_max_predict, aes(x = year, ymin = PredictedValues.fit.lwr, ymax = PredictedValues.fit.upr), fill = "blue", alpha = 0.3) +
geom_point(data = max_real, aes(x = year, y = max_sea_level, color = "Observed"), alpha = 0.5) +
geom_point(data = venice_max_predict, aes(x = year, y = PredictedValues.fit.fit, color = "Predicted"), shape = 1) +
labs(title = "Real extreme values from 2010 to 2022 versus predicted values' confidence intervals", x = "Year", y = "Sea Level") +
scale_x_continuous(breaks = unique(c(venice_max_predict$year, max_real$year))) +
scale_color_manual(name = "Data Type", values = c("Observed" = "red", "Predicted" = "black")) +
guides(color = guide_legend(override.aes = list(shape = c(NA, 1)), title = "Data Type"))
ggplot() +
geom_ribbon(data = venice_max_predict, aes(x = year, ymin = PredictedValues.fit.lwr, ymax = PredictedValues.fit.upr), fill = "blue", alpha = 0.3) +
geom_point(data = max_real, aes(x = year, y = max_sea_level, color = "Observed"), colour = "red", alpha = 0.5) +
geom_point(data = venice_max_predict, aes(x = year, y = PredictedValues.fit.fit, color = "Predicted"), shape = 1) +
labs(title = "Real extreme values from 2010 to 2022 versus predicted values' confidence intervals", x = "Year", y = "Sea Level") +
scale_x_continuous(breaks = unique(c(venice_max_predict$year, max_real$year))) +
scale_color_manual(name = "Data Type", values = c("Observed" = "red", "Predicted" = "black")) +
guides(color = guide_legend(override.aes = list(shape = c(NA, 1)), title = "Data Type"))
ggplot() +
geom_ribbon(data = venice_max_predict, aes(x = year, ymin = PredictedValues.fit.lwr, ymax = PredictedValues.fit.upr), fill = "blue", alpha = 0.3) +
geom_point(data = max_real, aes(x = year, y = max_sea_level, color = "Observed"), color = "red", alpha = 0.5) +
geom_point(data = venice_max_predict, aes(x = year, y = PredictedValues.fit.fit, color = "Predicted"), shape = 1) +
labs(title = "Real extreme values from 2010 to 2022 versus predicted values' confidence intervals", x = "Year", y = "Sea Level") +
scale_x_continuous(breaks = unique(c(venice_max_predict$year, max_real$year))) +
scale_color_manual(name = "Data Type", values = c("Observed" = "red", "Predicted" = "black")) +
guides(color = guide_legend(override.aes = list(shape = c(NA, 1)), title = "Data Type"))
??geom_point
ggplot() +
geom_ribbon(data = venice_max_predict, aes(x = year, ymin = PredictedValues.fit.lwr, ymax = PredictedValues.fit.upr), fill = "blue", alpha = 0.3) +
geom_point(data = max_real, aes(x = year, y = max_sea_level, color = "Observed", colour = "red"), alpha = 0.5) +
geom_point(data = venice_max_predict, aes(x = year, y = PredictedValues.fit.fit, color = "Predicted"), shape = 1) +
labs(title = "Real extreme values from 2010 to 2022 versus predicted values' confidence intervals", x = "Year", y = "Sea Level") +
scale_x_continuous(breaks = unique(c(venice_max_predict$year, max_real$year))) +
scale_color_manual(name = "Data Type", values = c("Observed" = "red", "Predicted" = "black")) +
guides(color = guide_legend(override.aes = list(shape = c(NA, 1)), title = "Data Type"))
ggplot() +
geom_ribbon(data = venice_max_predict, aes(x = year, ymin = PredictedValues.fit.lwr, ymax = PredictedValues.fit.upr), fill = "blue", alpha = 0.3) +
geom_point(data = max_real, aes(x = year, y = max_sea_level, color = "Observed", colour = "red"), alpha = 0.5) +
geom_point(data = venice_max_predict, aes(x = year, y = PredictedValues.fit.fit, color = "Predicted"), shape = 1) +
labs(title = "Real extreme values from 2010 to 2022 versus predicted values' confidence intervals", x = "Year", y = "Sea Level") +
scale_x_continuous(breaks = unique(c(venice_max_predict$year, max_real$year))) +
scale_color_manual(name = "Data Type", values = c("Observed" = "red", "Predicted" = "black"))
ggplot() +
geom_ribbon(data = venice_max_predict, aes(x = year, ymin = PredictedValues.fit.lwr, ymax = PredictedValues.fit.upr), fill = "blue", alpha = 0.3) +
geom_point(data = max_real, aes(x = year, y = max_sea_level, color = "Observed", colour = "red"), alpha = 0.5) +
geom_point(data = venice_max_predict, aes(x = year, y = PredictedValues.fit.fit, color = "Predicted"), shape = 1) +
labs(title = "Real extreme values from 2010 to 2022 versus predicted values' confidence intervals", x = "Year", y = "Sea Level") +
scale_x_continuous(breaks = unique(c(venice_max_predict$year, max_real$year))) +
scale_color_manual(name = "Data Type", values = c("Observed" = "red", "Predicted" = "black"))
??geom_point
#QUESTION C
#Add the model in a data frame
venice_max_predict <- data.frame(
PredictedValues = mod1_predict
) %>%
mutate(year = c(2010:2022))
venice_max_predict
#Plot the confidence intervals
plotCI(x = venice_max_predict$year,
y = venice_max_predict$PredictedValues.fit.fit,
li = venice_max_predict$PredictedValues.fit.lwr,
ui = venice_max_predict$PredictedValues.fit.upr)
#Create a new dataframe for the extreme values of 2010 - 2022
max_real <- data.frame(year = c(2012, 2012, 2013, 2018, 2019, 2019, 2019, 2022), max_sea_level = c(143, 149, 143, 156, 187, 144, 154, 204))
ggplot() +
geom_ribbon(data = venice_max_predict, aes(x = year, ymin = PredictedValues.fit.lwr, ymax = PredictedValues.fit.upr), fill = "blue", alpha = 0.3) +
geom_point(data = max_real, aes(x = year, y = max_sea_level, color = "Observed", colour = "red"), alpha = 0.5) +
geom_point(data = venice_max_predict, aes(x = year, y = PredictedValues.fit.fit, color = "Predicted"), shape = 1) +
labs(title = "Real extreme values from 2010 to 2022 versus predicted values' confidence intervals", x = "Year", y = "Sea Level") +
scale_x_continuous(breaks = unique(c(venice_max_predict$year, max_real$year))) +
scale_color_manual(name = "Data Type", values = c("Observed" = "red", "Predicted" = "black"))
library(extRemes)
gev_fix <- fevd(max_sea_levels, type = "GEV", time.units="years")
gev_fix
gev_fix <- fevd(max_sea_levels, type = "GEV", time.units= "years")
# annual maxima from this set of data in South-West England
# from extRemes package, can use fevd()
library(extRemes)
## Simulate Gumbel distribution
# Go through quantile function of the Gumbel distribution, using unif(0,1) variates
x <- runif(1000)
mu <- 1
beta <- 5
y <- mu-beta*log(-log(x))
plot(y, x) # cdf of a Gumbel distribution
seqx <- seq(-50, 50, by=0.1)
z <- (seqx-mu)/beta
plot(seqx, 1/beta*exp(-z-exp(-z)), type="l")
# You can do pretty much the same for the other extreme-value distributions
# Anderson-Darling test
library(DescTools)
AndersonDarlingTest(y, null="pGumbel", loc=mu, scale=beta)
# Fitting a GEV distribution to Gumbel observations
library(ismev)
mod0 <- gev.fit(y)
# Does it fit?
qqplot(rGumbel(length(y), loc=mu, scale=beta), y)
qqline(y, distribution=function(p) qGumbel(p, loc=mu, scale=beta))
# What about a distribution you might not know which domain of attraction it falls into?
library(lubridate)
obs.date <- seq(from=as.Date("1993-01-01", format = "%Y-%m-%d"), to=as.Date("2022-12-31", format = "%Y-%m-%d"), by="day")
obs <- rt(length(obs.date), df=1.5)
df <- data.frame(obs.date)
df <- data.frame(df, obs)
max <- data.frame(0, 0, 0)
years <- unique(year(df$obs.date))
months <- unique(month(df$obs.date))
for(i in 1:length(years)){
for(j in 1:length(months)){
subset <- df[(month(df$obs.date)==months[j])&(year(df$obs.date)==years[i]),]
max <- rbind(max, c(month=months[j], year=years[i], max(subset$obs)))
}
}
max <- max[-1, ]
colnames(max) <- c("month", "year", "maximum")
mod1 <- gev.fit(max$maximum)
gev.diag(mod1) #diagnostics plot
mod2 <- gev.fit(max$maximum, max, mul=2)
mod2
1-pchisq(-2*(mod2$nllh-mod1$nllh),1) #chi-square test
# The trend is not significant, this is expected!
## Data example
## Reproduced from great walkthrough by Hugo Winter
## available at: https://younghydrologicsociety.files.wordpress.com/2018/04/eva_training_exercises_egu_2018.pdf
data(rain) #from ismev
years <- rep(1:48, rep(c(365,365,366,365), times = 12))[-17532]
rain.ann.max <- unlist(lapply(X = split(rain,years), FUN = max))
# annual maxima from this set of data in South-West England
# from extRemes package, can use fevd()
library(extRemes)
mod3 <- fevd(rain.ann.max, type="GEV", time.units="years")
plot(mod3)
mod3$results$par #gives parameters of the GEV
# suggest heavy-tailed model here, but only point estimates.
# What about building confidence intervals?
ci.fevd(mod3, alpha=0.05, type="parameter")
# the CI includes 0 for the shape parameter, so not sure we're that heavy-tailed
gev.rl <- return.level(x = mod3, return.period = c(10,100,1000,10000),
do.ci = TRUE, alpha = 0.05)
gev.rl
#notice the very wide CI for the 10000-year return level.
# We clearly do not have enough data and the uncertainty
# concerning the shape parameter drives this.
## How to compute return levels (by hand) using GEV
# e.g. in the rain example, compute the 10-year return level
# understand here: the value exceeded one out of every 10 365-days block (1 year)
# approximated by
as.numeric(mod3$results$par[1]+mod3$results$par[2]*((-log(1-1/10))^(-mod3$results$par[3])-1)/mod3$results$par[3])
# or, as it is the 1-1/k = 1-1/10th quantile
qgev(1-1/10, location=mod3$results$par[1], scale=mod3$results$par[2], shape=mod3$results$par[3])
## Return period associated with level u
# recall: 1/(1-H(u))
as.numeric(1/(1-pgev(qgev(1-1/10, location=mod3$results$par[1], scale=mod3$results$par[2], shape=mod3$results$par[3]), location=mod3$results$par[1], scale=mod3$results$par[2], shape=mod3$results$par[3])))
# the above corresponds to 1/10 period as expected!
unique.years <- unique(years)
plot(unique.years, rain.ann.max)
# For simplicity: suppose you want to assess the number of blocks (years here) needed to exceed level 70, i.e. {Mn > 50}
as.numeric(1/(1-pgev(70, location=mod3$results$par[1], scale=mod3$results$par[2], shape=mod3$results$par[3])))
# you expect an average of 14.01 blocks (years) to wait before exceeding 70.
# making predictions with linear models (remainder)
mod4 <- lm(rain.ann.max~unique.years)
# making predictions for 5 years
predict.lm(mod4,newdata=data.frame("unique.years"=c(49:53)),se=T)
rain.ann.max
list_max_sea_levels <- unlist(max_sea_levels)
list_max_sea_levels <- unlist(max_sea_levels$max_sea_level)
list_max_sea_levels
View(max_sea_levels)
knitr::opts_chunk$set(echo = TRUE)
library(ismev)
library(VGAM)
library(tidyverse)
library(plotly)
library(plotrix)
library(scales)
#QUESTION A
#Read the Data
venice <- venice90
venice_max <- venice %>%
group_by(year) %>%
summarise(max_sea_level = max(sealevel))
head(venice_max)
plot_ly(venice_max, x = ~year, y = ~max_sea_level, type = 'scatter', mode = 'markers', name = 'Max Value') %>% layout(title = "Maximum Value per year", xaxis = list(title="Year"), yaxis = list(title="Maximum Value"))  %>% add_segments(x = 1940, xend = 2009, y = 140, yend = 140, line = list(color = 'red', width = 2))
#QUESTION B
# making predictions with linear models (remainder)
mod1 <- lm(max_sea_level ~ year, data = venice_max)
summary(mod1)
# making predictions for 5 years
mod1_predict <- predict.lm(mod1,newdata=data.frame("year"=c(2010:2022)),se=T, interval = "confidence", level = 0.95)
mod1_predict
#QUESTION C
#Add the model in a data frame
venice_max_predict <- data.frame(
PredictedValues = mod1_predict
) %>%
mutate(year = c(2010:2022))
venice_max_predict
#Plot the confidence intervals
plotCI(x = venice_max_predict$year,
y = venice_max_predict$PredictedValues.fit.fit,
li = venice_max_predict$PredictedValues.fit.lwr,
ui = venice_max_predict$PredictedValues.fit.upr)
#Create a new dataframe for the extreme values of 2010 - 2022
max_real <- data.frame(year = c(2012, 2012, 2013, 2018, 2019, 2019, 2019, 2022), max_sea_level = c(143, 149, 143, 156, 187, 144, 154, 204))
ggplot() +
geom_ribbon(data = venice_max_predict, aes(x = year, ymin = PredictedValues.fit.lwr, ymax = PredictedValues.fit.upr), fill = "blue", alpha = 0.3) +
geom_point(data = max_real, aes(x = year, y = max_sea_level, color = "Observed", colour = "red"), alpha = 0.5) +
geom_point(data = venice_max_predict, aes(x = year, y = PredictedValues.fit.fit, color = "Predicted"), shape = 1) +
labs(title = "Real extreme values from 2010 to 2022 versus predicted values' confidence intervals", x = "Year", y = "Sea Level") +
scale_x_continuous(breaks = unique(c(venice_max_predict$year, max_real$year))) +
scale_color_manual(name = "Data Type", values = c("Observed" = "red", "Predicted" = "black"))
library(extRemes)
list_max_sea_levels <- unlist(max_sea_levels$max_sea_level)
gev_fix <- fevd(max_sea_levels, type = "GEV", time.units= "years")
mod3 <- fevd(rain.ann.max, type="GEV", time.units="years")
plot(mod3)
mod3$results$par #gives parameters of the GEV
View(max_sea_levels)
#QUESTION A
#Read the Data
venice <- venice90
venice_max <- venice %>%
group_by(year) %>%
summarise(max_sea_level = max(sealevel))
head(venice_max)
plot_ly(venice_max, x = ~year, y = ~max_sea_level, type = 'scatter', mode = 'markers', name = 'Max Value') %>% layout(title = "Maximum Value per year", xaxis = list(title="Year"), yaxis = list(title="Maximum Value"))  %>% add_segments(x = 1940, xend = 2009, y = 140, yend = 140, line = list(color = 'red', width = 2))
list_max_sea_levels <- unlist(venice_max$max_sea_level)
list_max_sea_levels
gev_fix <- fevd(list_max_sea_levels, type = "GEV", time.units= "years")
plot(gev_fix)
plot(mod3)
print(plot(mod3))
mod3
list_max_sea_levels <- unlist(venice_max$max_sea_level)
gev_fix <- fevd(list_max_sea_levels, type = "GEV", time.units= "years")
plot(gev_fix)
??fevd
list_max_sea_levels <- unlist(venice_max$max_sea_level)
gev_fix <- fevd(list_max_sea_levels, type = "Gumbel", time.units= "years")
plot(gev_fix)
list_max_sea_levels <- unlist(venice_max$max_sea_level)
gev_fix <- fevd(list_max_sea_levels, type = "GEV", time.units= "years")
plot(gev_fix)
plot(gev_fix) ; gev_fix$results$par
??gev.fit
??fevd
gev_time_varying <- fevd(venice_max, type = "GEV", time.units = "years", formula = max_sea_level ~ venice_max$year)
gev_time_varying <- fevd(venice_max, type = "GEV", time.units = "years", formula = venice_max$max_sea_level ~ venice_max$year)
gev_time_varying <- fevd(venice_max, type = "GEV", time.units = "years", formula = max_sea_level ~ year)
model <- gev.fit(venice_max$max_sea_level ~ venice_max$year, type = "location", data = venice_max)
library(extRemes)
list_max_sea_levels <- unlist(venice_max$max_sea_level)
gev_fix <- fevd(list_max_sea_levels, type = "GEV", time.units= "years")
plot(gev_fix) ; gev_fix$results$par
gev_fix$results$par
plot(gev_fix)
model <- gev.fit(venice_max$max_sea_level ~ venice_max$year, type = "location", data = venice_max)
plot(gev_fix)
??ismev::gev.fit
time_varying_gev_model <- gev.fit(venice_max$max_sea_level ~ venice_max$year, data = venice_max)
gev_fix$results$par
plot(gev_fix)
