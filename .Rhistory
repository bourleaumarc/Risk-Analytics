# Print the data
print(data)
library(rvest)
library(dplyr)
# Define the URL
url <- "https://www.snipes.ch/fr/c/shoes?srule=Standard&prefn1=isSale&prefv1=true&openCategory=true&sz=undefined"
# Read the HTML content from the website
page <- read_html(url)
# Extract product details
products <- page %>%
html_nodes(".b-product-grid.fijs-product-grid") %>%
html_children()
# Extract information for each product
data <- tibble(
name = products %>% html_nodes(".b-product-tile-title") %>% html_text(),
brand = products %>% html_nodes(".b-product-tile-brand") %>% html_text(),
original_price = products %>% html_nodes(".b-product-tile-price-item") %>% html_text(),
discounted_price = products %>% html_nodes(".b-product-tile-price-item b-product-tile-price-item--line-through") %>% html_text()
)
# Print the data
print(data)
url <- "https://www.snipes.ch/fr/c/shoes?srule=Standard&prefn1=isSale&prefv1=true&openCategory=true&sz=undefined"
# Read the HTML content from the website
page <- read_html(url)
# Extract product details
products <- page %>%
html_nodes(".b-product-grid.fijs-product-grid") %>%
html_children()
# Extract information for each product
data <- tibble(
name = products %>% html_nodes(".b-product-tile-title") %>% html_text()
library(rvest)
# Define the URL
url <- "https://www.snipes.ch/fr/c/shoes?srule=Standard&prefn1=isSale&prefv1=true&openCategory=true&sz=undefined"
# Read the HTML content from the website
page <- read_html(url)
# Extract product details
products <- page %>%
html_nodes(".b-product-grid") %>%
html_children()
# Extract information for each product
data <- tibble(
name = products %>% html_nodes(".b-product-tile-title") %>% html_text(),
brand = products %>% html_nodes(".b-product-tile-brand") %>% html_text(),
original_price = products %>% html_nodes(".b-product-tile-price-item") %>% html_text(),
discounted_price = products %>% html_nodes(".b-product-tile-price-item.b-product-tile-price-item--line-through") %>% html_text()
)
View(data)
page <- read_html(url)
# Extract product details
products <- page %>%
html_nodes(".b-product-grid") %>%
html_children()
# Extract information for each product
data <- tibble(
name = products %>% html_nodes(".b-product-tile-title") %>% html_text()
View(data)
View(data)
products <- page %>%
html_nodes(".b-product-grid.js-product-grid") %>%
html_children()
View(products)
products <- page %>%
html_nodes("div.b-product-grid-tile-outer.js-product-tiles div div div div.b-product-tile-info-container div a div.b-product-tile-title-container div.b-product-tile-title.b-product-tile-text span") %>%
html_children()
products <- page %>%
html_nodes("div.b-product-grid-tile-outer.js-product-tiles div div div div.b-product-tile-info-container div a div.b-product-tile-title-container div.b-product-tile-title.b-product-tile-text span") %>%
html_children()
# Extract information for each product
data <- tibble(
name = products %>% html_nodes(".b-product-tile-title") %>% html_text(),
brand = products %>% html_nodes(".b-product-tile-brand") %>% html_text(),
original_price = products %>% html_nodes(".b-product-tile-price-item") %>% html_text(),
discounted_price = products %>% html_nodes(".b-product-tile-price-item.b-product-tile-price-item--line-through") %>% html_text()
)
# Print the data
print(data)
library(rvest)
library(dplyr)
# Define the URL
url <- "https://www.snipes.ch/fr/c/shoes?srule=Standard&prefn1=isSale&prefv1=true&openCategory=true&sz=undefined"
# Read the HTML content from the website
page <- read_html(url)
# Extract product details
products <- page %>%
html_nodes("div.b-product-grid-tile-outer.js-product-tiles div div div div.b-product-tile-info-container div a div.b-product-tile-title-container div.b-product-tile-title.b-product-tile-text span") %>%
html_children()
# Extract information for each product
data <- tibble(
name = products %>% html_nodes(".b-product-tile-title") %>% html_text(),
brand = products %>% html_nodes(".b-product-tile-brand") %>% html_text(),
original_price = products %>% html_nodes(".b-product-tile-price-item") %>% html_text(),
discounted_price = products %>% html_nodes(".b-product-tile-price-item.b-product-tile-price-item--line-through") %>% html_text()
)
# Print the data
print(data)
library(rvest)
library(dplyr)
# Define the URL
url <- "https://www.snipes.ch/fr/c/shoes?srule=Standard&prefn1=isSale&prefv1=true&openCategory=true&sz=undefined"
# Read the HTML content from the website
page <- read_html(url)
# Extract product details
products <- page %>%
html_nodes("div.b-product-grid-tile-outer.js-product-tiles div div div div.b-product-tile-info-container div a div.b-product-tile-title-container div.b-product-tile-title.b-product-tile-text span") %>%
html_children()
# Extract information for each product
data <- tibble(
name = products %>% html_nodes(".b-product-tile-title") %>% html_text(),
brand = products %>% html_nodes(".b-product-tile-brand") %>% html_text(),
original_price = products %>% html_nodes(".b-product-tile-price-item") %>% html_text(),
discounted_price = products %>% html_nodes(".b-product-tile-price-item.b-product-tile-price-item--line-through") %>% html_text()
)
# Print the data
print(data)
products <- page %>%
html_nodes(".b-product-grid.js-product-grid") %>%
html_children()
html_children
page <- read_html(url)
# Extract product details
products <- page %>%
html_nodes(".b-product-grid.js-product-grid") %>%
html_children()
# Extract information for each product
data <- tibble(
name = products %>% html_nodes(".b-product-tile-title") %>% html_text()
# Define the URL
url <- "https://www.snipes.ch/fr/c/shoes?srule=Standard&prefn1=isSale&prefv1=true&openCategory=true&sz=undefined"
# Define the URL
url <- "https://www.snipes.ch/fr/c/shoes?srule=Standard&prefn1=isSale&prefv1=true&openCategory=true&sz=undefined"
# Read the HTML content from the website
page <- read_html(url)
# Extract product details
products <- page %>%
html_nodes(".b-product-grid.js-product-grid") %>%
html_children()
# Extract information for each product
data <- tibble(
name = products %>% html_nodes(".b-product-tile-link.js-product-tile-link") %>% html_text(),
brand = products %>% html_nodes(".b-product-tile-brand.b-product-tile-text.js-product-tile-link") %>% html_text())
View(data)
# Define the URL
url <- "https://www.snipes.ch/fr/c/shoes?srule=Standard&prefn1=isSale&prefv1=true&openCategory=true&sz=undefined"
# Read the HTML content from the website
page <- read_html(url)
# Extract product details
products <- page %>%
html_nodes(".b-product-grid.js-product-grid") %>%
html_children()
# Extract information for each product
data <- tibble(
name = products %>% html_nodes(".b-product-tile-link.js-product-tile-link") %>% html_text(),
brand = products %>% html_nodes(".b-product-tile-brand.b-product-tile-text.js-product-tile-link") %>% html_text(),
original_price = products %>% html_nodes(".b-product-tile-price-item") %>% html_text(),
discounted_price = products %>% html_nodes("b-product-tile-price-item.b-product-tile-price-item--line-through") %>% html_text()
)
library(rvest)
library(dplyr)
# Define the URL
url <- "https://www.snipes.ch/fr/c/shoes?srule=Standard&prefn1=isSale&prefv1=true&openCategory=true&sz=undefined"
# Read the HTML content from the website
page <- read_html(url)
# Extract product details
products <- page %>%
html_nodes(".b-product-grid-tile-outer.js-product-tiles") %>%
html_children()
# Extract information for each product
data <- tibble(
name = products %>% html_nodes(".b-product-tile-link.js-product-tile-link") %>% html_text(),
brand = products %>% html_nodes(".b-product-tile-brand.b-product-tile-text.js-product-tile-link") %>% html_text(),
original_price = products %>% html_nodes(".b-product-tile-price-item") %>% html_text(),
discounted_price = products %>% html_nodes("b-product-tile-price-item.b-product-tile-price-item--line-through") %>% html_text()
)
# Define the URL
url <- "https://www.snipes.ch/fr/c/shoes?srule=Standard&prefn1=isSale&prefv1=true&openCategory=true&sz=undefined"
# Read the HTML content from the website
page <- read_html(url)
# Extract product details
products <- page %>%
html_nodes(".b-product-grid-tile-outer.js-product-tiles") %>%
html_children()
# Extract information for each product
data <- tibble(
name = products %>% html_nodes(".b-product-tile-link.js-product-tile-link") %>% html_text(),
brand = products %>% html_nodes(".b-product-tile-brand.b-product-tile-text.js-product-tile-link") %>% html_text())
url <- "https://www.snipes.ch/fr/c/shoes?srule=Standard&prefn1=isSale&prefv1=true&openCategory=true&sz=undefined"
# Read the HTML content from the website
page <- read_html(url)
# Extract product details
products <- page %>%
html_nodes("div.b-product-grid-tile-outer.js-product-tiles div div div div.b-product-tile-info-container div a div.b-product-tile-title-container div.b-product-tile-title.b-product-tile-text span") %>%
html_children()
# Extract information for each product
data <- tibble(
name = products %>% html_nodes(".b-product-tile-link.js-product-tile-link") %>% html_text(),
brand = products %>% html_nodes(".b-product-tile-brand.b-product-tile-text.js-product-tile-link") %>% html_text()),
library(rvest)
library(dplyr)
# Define the URL
url <- "https://www.snipes.ch/fr/c/shoes?srule=Standard&prefn1=isSale&prefv1=true&openCategory=true&sz=undefined"
# Read the HTML content from the website
page <- read_html(url)
# Extract product details
products <- page %>%
html_nodes(".b-product-grid-tile-outer.js-product-tiles") %>%
html_children()
# Extract information for each product
data <- tibble(
name = products %>% html_nodes(".b-product-tile-link.js-product-tile-link") %>% html_text(),
brand = products %>% html_nodes(".b-product-tile-brand.b-product-tile-text.js-product-tile-link") %>% html_text()),
library(rvest)
library(dplyr)
# Define the URL
url <- "https://www.snipes.ch/fr/c/shoes?srule=Standard&prefn1=isSale&prefv1=true&openCategory=true&sz=undefined"
# Read the HTML content from the website
page <- read_html(url)
# Extract product details
products <- page %>%
html_nodes(".b-product-grid-tile-outer.js-product-tiles") %>%
html_children()
# Extract information for each product
data <- tibble(
name = products %>% html_nodes(".b-product-tile-link.js-product-tile-link") %>% html_text(),
brand = products %>% html_nodes(".b-product-tile-brand.b-product-tile-text.js-product-tile-link") %>% html_text(),
original_price = products %>% html_nodes(".b-product-tile-price-item") %>% html_text(),
discounted_price = products %>% html_nodes("b-product-tile-price-item.b-product-tile-price-item--line-through") %>% html_text()
)
library(rvest)
library(dplyr)
# Define the URL
url <- "https://www.snipes.ch/fr/c/shoes?srule=Standard&prefn1=isSale&prefv1=true&openCategory=true&sz=undefined"
# Read the HTML content from the website
page <- read_html(url)
# Extract product details
products <- page %>%
html_nodes(".b-product-grid-tile-outer.js-product-tiles") %>%
html_children()
# Extract information for each product
data <- tibble(
name = products %>% html_nodes(".b-product-tile-link.js-product-tile-link") %>% html_text(),
brand = products %>% html_nodes(".b-product-tile-brand.b-product-tile-text.js-product-tile-link") %>% html_text(),
original_price = products %>% html_nodes(".b-product-tile-price-item") %>% html_text(),
discounted_price = products %>% html_nodes("b-product-tile-price-item.b-product-tile-price-item--line-through") %>% html_text()
)
print(length(name_nodes))
original_price = products %>% html_nodes(".b-product-tile-price-item") %>% html_text()
products <- page %>%
html_nodes(".b-product-grid-tile-outer.js-product-tiles") %>%
html_children()
products <- page %>%
html_nodes(".b-product-grid-tile-outer.js-product-tiles") %>%
html_children()
# Extract product details
products <- page %>%
html_nodes("div.b-product-grid-tile-outer.js-product-tiles div div div div.b-product-tile-info-container div a div.b-product-tile-title-container div.b-product-tile-title.b-product-tile-text span") %>%
html_children()
data <- tibble(
name = products %>% html_nodes(".b-product-tile-link.js-product-tile-link") %>% html_text(),
brand = products %>% html_nodes(".b-product-tile-brand.b-product-tile-text.js-product-tile-link") %>% html_text(),
original_price = products %>% html_nodes(".b-product-tile-price-item") %>% html_text(),
discounted_price = products %>% html_nodes("b-product-tile-price-item.b-product-tile-price-item--line-through") %>% html_text()
)
url <- "https://www.snipes.ch/fr/c/shoes?srule=Standard&prefn1=isSale&prefv1=true&openCategory=true&sz=349"
scrap_data_fun <- function(url_link) {
url_html <- url_link %>%
read_html()
# Scraping brand information
brand_text <- url_html %>%
html_nodes("div.b-product-grid-tile-outer.js-product-tiles div div div div.b-product-tile-info-container div a div.b-product-tile-title-container div.b-product-tile-brand-colours span") %>%
html_text() %>%
str_remove_all("\n")
# Scraping name information
name_text <- url_html %>%
html_nodes("div.b-product-grid-tile-outer.js-product-tiles div div div div.b-product-tile-info-container div a div.b-product-tile-title-container div.b-product-tile-title.b-product-tile-text span") %>%
html_text() %>%
str_remove_all("\n")
# Scraping discounted price information
discounts <- url_html %>%
html_nodes("div.b-product-grid-tile-outer.js-product-tiles div div div div.b-product-tile-info-container div a div.b-product-tile-price div span:nth-child(2) span") %>%
html_text() %>%
str_remove_all("\n") %>%
str_remove_all("CHF ") %>%
str_replace_all(",", ".") %>%
as.numeric()
# Scraping original price information
prices <- url_html %>%
html_nodes("div.b-product-grid-tile-outer.js-product-tiles div div div div.b-product-tile-info-container div a div.b-product-tile-price div span.b-product-tile-price-outer.b-product-tile-price-outer--line-through span") %>%
html_text() %>%
str_remove_all("\n") %>%
str_remove_all("CHF ") %>%
str_replace_all(",", ".") %>%
as.numeric()
# Create a data frame with brand and name columns
snipes_df <- data.frame(brand = brand_text, name = name_text, original_price = prices, discounted_prices = discounts)
}
snipes_df <- scrap_data_fun(url)
View(snipes_df)
View(snipes_df)
library(ggplot2)
# Calculate absolute discount
snipes_df <- snipes_df %>%
mutate(absolute_discount = original_price - discounted_price)
# Calculate absolute discount
snipes_df <- snipes_df %>%
mutate(absolute_discount = original_price - discounted_prices)
# Generate scatter plot
ggplot(snipes_df, aes(x = original_price, y = absolute_discount, color = brand)) +
geom_point() +
labs(x = "Original Price", y = "Absolute Discount", title = "Discounts by Original Price and Brand") +
theme_minimal() +
scale_color_discrete(name = "Brand") # Adjust the name of the legend if needed
library(plotly)
# Calculate absolute discount
snipes_df <- snipes_df %>%
mutate(absolute_discount = original_price - discounted_prices)
# Generate ggplot
p <- ggplot(snipes_df, aes(x = original_price, y = absolute_discount, color = brand)) +
geom_point() +
labs(x = "Original Price", y = "Absolute Discount", title = "Discounts by Original Price and Brand") +
theme_minimal() +
scale_color_discrete(name = "Brand") # Adjust the name of the legend if needed
# Convert to an interactive plotly object
ggplotly(p)
# Calculate absolute discount
snipes_df <- snipes_df %>%
mutate(absolute_discount = discounted_prices - original_price)
# Generate ggplot
p <- ggplot(snipes_df, aes(x = original_price, y = absolute_discount, color = brand)) +
geom_point() +
labs(x = "Original Price", y = "Absolute Discount", title = "Discounts by Original Price and Brand") +
theme_minimal() +
scale_color_discrete(name = "Brand") # Adjust the name of the legend if needed
# Convert to an interactive plotly object
ggplotly(p)
write.csv(snipes_df, "snipes_data.csv", row.names = FALSE)
=======
rlci<- data.frame(Lower_CI = numeric(), return_level = numeric(), Upper_CI = numeric())
B <- 3
return_level <- numeric(B)
for (i in 1:13){
for(j in 1:B){
data <- rgev(70, loc = gev_time_varying_location_shape$results$par[1] + gev_time_varying_location_shape$results$par[2] * (70+i), scale = gev_time_varying_location_shape$results$par[3], shape = gev_time_varying_location_shape$results$par[4] + gev_time_varying_location_shape$results$par[5] * (70+i))
fit <- fevd(data, venice_max, type = "GEV", time.units = "year", shape.fun = ~ yy, location.fun =  ~ yy)
return_level[j] <- qgev(1 - 1/13, location = fit$results$par[1] + fit$results$par[2] * (70+i), scale = fit$results$par[3], shape = fit$results$par[4] + fit$results$par[5] * (70+i))
}
rt <- mean(return_level)
rtl <- quantile(return_level, probs = 0.025)
rtu <- quantile(return_level, probs = 0.975)
rlci <- rbind(rlci, data.frame(Lower_CI = rtl, return_level = rt, Upper_CI = rtu))
}
rlci<- data.frame(Lower_CI = numeric(), return_level = numeric(), Upper_CI = numeric())
B <- 3
return_level <- numeric(B)
for (i in 1:3){
for(j in 1:B){
data <- suppressWarnings(rgev(70, loc = gev_time_varying_location_shape$results$par[1] + gev_time_varying_location_shape$results$par[2] * (70+i), scale = gev_time_varying_location_shape$results$par[3], shape = gev_time_varying_location_shape$results$par[4] + gev_time_varying_location_shape$results$par[5] * (70+i)))
fit <- suppressWarnings(fevd(data, venice_max, type = "GEV", time.units = "year", shape.fun = ~ yy, location.fun =  ~ yy))
return_level[j] <- qgev(1 - 1/13, location = fit$results$par[1] + fit$results$par[2] * (70+i), scale = fit$results$par[3], shape = fit$results$par[4] + fit$results$par[5] * (70+i))
}
rt <- mean(return_level)
rtl <- quantile(return_level, probs = 0.025)
rtu <- quantile(return_level, probs = 0.975)
rlci <- rbind(rlci, data.frame(Lower_CI = rtl, return_level = rt, Upper_CI = rtu))
}
rlci<- data.frame(Lower_CI = numeric(), return_level = numeric(), Upper_CI = numeric())
B <- 3
return_level <- numeric(B)
for (i in 1:5){
for(j in 1:B){
data <- suppressWarnings(rgev(70, loc = gev_time_varying_location_shape$results$par[1] + gev_time_varying_location_shape$results$par[2] * (70+i), scale = gev_time_varying_location_shape$results$par[3], shape = gev_time_varying_location_shape$results$par[4] + gev_time_varying_location_shape$results$par[5] * (70+i)))
fit <- suppressWarnings(fevd(data, venice_max, type = "GEV", time.units = "year", shape.fun = ~ yy, location.fun =  ~ yy))
return_level[j] <- qgev(1 - 1/13, location = fit$results$par[1] + fit$results$par[2] * (70+i), scale = fit$results$par[3], shape = fit$results$par[4] + fit$results$par[5] * (70+i))
}
rt <- mean(return_level)
rtl <- quantile(return_level, probs = 0.025)
rtu <- quantile(return_level, probs = 0.975)
rlci <- rbind(rlci, data.frame(Lower_CI = rtl, return_level = rt, Upper_CI = rtu))
}
rlci<- data.frame(return_level = numeric(), Lower_CI = numeric(), Upper_CI = numeric())
B <- 3
return_level <- numeric(B)
for (i in 1:5){
for(j in 1:B){
data <- suppressWarnings(rgev(70, loc = gev_time_varying_location_shape$results$par[1] + gev_time_varying_location_shape$results$par[2] * (70+i), scale = gev_time_varying_location_shape$results$par[3], shape = gev_time_varying_location_shape$results$par[4] + gev_time_varying_location_shape$results$par[5] * (70+i)))
fit <- suppressWarnings(fevd(data, venice_max, type = "GEV", time.units = "year", shape.fun = ~ yy, location.fun =  ~ yy))
return_level[j] <- qgev(1 - 1/13, location = fit$results$par[1] + fit$results$par[2] * (70+i), scale = fit$results$par[3], shape = fit$results$par[4] + fit$results$par[5] * (70+i))
}
rt <- mean(return_level)
rtl <- quantile(return_level, probs = 0.025)
rtu <- quantile(return_level, probs = 0.975)
rlci <- rbind(rlci, data.frame(return_level = rt, Lower_CI = rtl, Upper_CI = rtu))
}
rlci<- data.frame(return_level = numeric(), Lower_CI = numeric(), Upper_CI = numeric())
B <- 20
return_level <- numeric(B)
for (i in 1:13){
for(j in 1:B){
data <- suppressWarnings(rgev(70, loc = gev_time_varying_location_shape$results$par[1] + gev_time_varying_location_shape$results$par[2] * (70+i), scale = gev_time_varying_location_shape$results$par[3], shape = gev_time_varying_location_shape$results$par[4] + gev_time_varying_location_shape$results$par[5] * (70+i)))
fit <- suppressWarnings(fevd(data, venice_max, type = "GEV", time.units = "year", shape.fun = ~ yy, location.fun =  ~ yy))
return_level[j] <- qgev(1 - 1/13, location = fit$results$par[1] + fit$results$par[2] * (70+i), scale = fit$results$par[3], shape = fit$results$par[4] + fit$results$par[5] * (70+i))
}
rt <- mean(return_level)
rtl <- quantile(return_level, probs = 0.025)
rtu <- quantile(return_level, probs = 0.975)
rlci <- rbind(rlci, data.frame(return_level = rt, Lower_CI = rtl, Upper_CI = rtu))
}
fit
rlci<- data.frame(return_level = numeric(), Lower_CI = numeric(), Upper_CI = numeric())
B <- 1
return_level <- numeric(B)
for (i in 1:1){
for(j in 1:B){
data <- suppressWarnings(rgev(70, loc = gev_time_varying_location_shape$results$par[1] + gev_time_varying_location_shape$results$par[2] * (70+i), scale = gev_time_varying_location_shape$results$par[3], shape = gev_time_varying_location_shape$results$par[4] + gev_time_varying_location_shape$results$par[5] * (70+i)))
fit <- suppressWarnings(fevd(data, venice_max, type = "GEV", time.units = "year", shape.fun = ~ yy, location.fun =  ~ yy))
return_level[j] <- qgev(1 - 1/13, location = fit$results$par[1] + fit$results$par[2] * (70+i), scale = fit$results$par[3], shape = fit$results$par[4] + fit$results$par[5] * (70+i))
}
rt <- mean(return_level)
rtl <- quantile(return_level, probs = 0.025)
rtu <- quantile(return_level, probs = 0.975)
rlci <- rbind(rlci, data.frame(return_level = rt, Lower_CI = rtl, Upper_CI = rtu))
}
rlci<- data.frame(return_level = numeric(), Lower_CI = numeric(), Upper_CI = numeric())
B <- 1
return_level <- numeric(B)
for (i in 1:1){
for(j in 1:B){
data <- suppressWarnings(rgev(70, loc = gev_time_varying_location_shape$results$par[1] + gev_time_varying_location_shape$results$par[2] * (70+i), scale = gev_time_varying_location_shape$results$par[3], shape = gev_time_varying_location_shape$results$par[4] + gev_time_varying_location_shape$results$par[5] * (70+i)))
fit <- suppressWarnings(fevd(data, venice_max, type = "GEV", time.units = "year", shape.fun = ~ yy, location.fun =  ~ yy))
return_level[j] <- qgev(1 - 1/13, location = fit$results$par[1] + fit$results$par[2] * (70+i), scale = fit$results$par[3], shape = fit$results$par[4] + fit$results$par[5] * (70+i))
}
rt <- mean(return_level)
rtl <- quantile(return_level, probs = 0.025)
rtu <- quantile(return_level, probs = 0.975)
rlci <- rbind(rlci, data.frame(return_level = rt, Lower_CI = rtl, Upper_CI = rtu))
}
fit
rlci<- data.frame(return_level = numeric(), Lower_CI = numeric(), Upper_CI = numeric())
B <- 1
return_level <- numeric(B)
for (i in 71:83){
for(j in 1:B){
data <- suppressWarnings(rgev(70, loc = gev_time_varying_location_shape$results$par[1] + gev_time_varying_location_shape$results$par[2] * i, scale = gev_time_varying_location_shape$results$par[3], shape = gev_time_varying_location_shape$results$par[4] + gev_time_varying_location_shape$results$par[5] * i))
fit <- suppressWarnings(fevd(data, venice_max, type = "GEV", time.units = "year", shape.fun = ~ yy, location.fun =  ~ yy))
return_level[j] <- qgev(1 - 1/13, location = fit$results$par[1] + fit$results$par[2] * i, scale = fit$results$par[3], shape = fit$results$par[4] + fit$results$par[5] * i)
}
rt <- mean(return_level)
rtl <- quantile(return_level, probs = 0.025)
rtu <- quantile(return_level, probs = 0.975)
rlci <- rbind(rlci, data.frame(return_level = rt, Lower_CI = rtl, Upper_CI = rtu))
}
rlci<- data.frame(return_level = numeric(), Lower_CI = numeric(), Upper_CI = numeric())
B <- 1
return_level <- numeric(B)
for (i in 71:71){
for(j in 1:B){
data <- suppressWarnings(rgev(70, loc = gev_time_varying_location_shape$results$par[1] + gev_time_varying_location_shape$results$par[2] * i, scale = gev_time_varying_location_shape$results$par[3], shape = gev_time_varying_location_shape$results$par[4] + gev_time_varying_location_shape$results$par[5] * i))
fit <- suppressWarnings(fevd(data, venice_max, type = "GEV", time.units = "year", shape.fun = ~ yy, location.fun =  ~ yy))
return_level[j] <- qgev(1 - 1/13, location = fit$results$par[1] + fit$results$par[2] * i, scale = fit$results$par[3], shape = fit$results$par[4] + fit$results$par[5] * i)
}
rt <- mean(return_level)
rtl <- quantile(return_level, probs = 0.025)
rtu <- quantile(return_level, probs = 0.975)
rlci <- rbind(rlci, data.frame(return_level = rt, Lower_CI = rtl, Upper_CI = rtu))
}
rlci<- data.frame(return_level = numeric(), Lower_CI = numeric(), Upper_CI = numeric())
B <- 1
return_level <- numeric(B)
for (i in 1:1){
for(j in 1:B){
data <- suppressWarnings(rgev(70, loc = gev_time_varying_location_shape$results$par[1] + gev_time_varying_location_shape$results$par[2] * (70+i), scale = gev_time_varying_location_shape$results$par[3], shape = gev_time_varying_location_shape$results$par[4] + gev_time_varying_location_shape$results$par[5] * (70+i)))
fit <- suppressWarnings(fevd(data, venice_max, type = "GEV", time.units = "year", shape.fun = ~ yy, location.fun =  ~ yy))
return_level[j] <- qgev(1 - 1/13, location = fit$results$par[1] + fit$results$par[2] * (70+i), scale = fit$results$par[3], shape = fit$results$par[4] + fit$results$par[5] * (70+i))
}
rt <- mean(return_level)
rtl <- quantile(return_level, probs = 0.025)
rtu <- quantile(return_level, probs = 0.975)
rlci <- rbind(rlci, data.frame(return_level = rt, Lower_CI = rtl, Upper_CI = rtu))
}
rlci<- data.frame(return_level = numeric(), Lower_CI = numeric(), Upper_CI = numeric())
B <- 10
return_level <- numeric(B)
for (i in 1:1){
for(j in 1:B){
data <- suppressWarnings(rgev(70, loc = gev_time_varying_location_shape$results$par[1] + gev_time_varying_location_shape$results$par[2] * (70+i), scale = gev_time_varying_location_shape$results$par[3], shape = gev_time_varying_location_shape$results$par[4] + gev_time_varying_location_shape$results$par[5] * (70+i)))
fit <- suppressWarnings(fevd(data, venice_max, type = "GEV", time.units = "year", shape.fun = ~ yy, location.fun =  ~ yy))
return_level[j] <- qgev(1 - 1/13, location = fit$results$par[1] + fit$results$par[2] * (70+i), scale = fit$results$par[3], shape = fit$results$par[4] + fit$results$par[5] * (70+i))
}
rt <- mean(return_level)
rtl <- quantile(return_level, probs = 0.025)
rtu <- quantile(return_level, probs = 0.975)
rlci <- rbind(rlci, data.frame(return_level = rt, Lower_CI = rtl, Upper_CI = rtu))
}
rlci<- data.frame(ID = c(1:13), return_level = numeric(), Lower_CI = numeric(), Upper_CI = numeric())
rlci<- data.frame(return_level = numeric(), Lower_CI = numeric(), Upper_CI = numeric())
B <- 5
return_level <- numeric(B)
for (i in 1:13){
for(j in 1:B){
data <- suppressWarnings(rgev(70, loc = gev_time_varying_location_shape$results$par[1] + gev_time_varying_location_shape$results$par[2] * (70+i), scale = gev_time_varying_location_shape$results$par[3], shape = gev_time_varying_location_shape$results$par[4] + gev_time_varying_location_shape$results$par[5] * (70+i)))
fit <- suppressWarnings(fevd(data, venice_max, type = "GEV", time.units = "year", shape.fun = ~ yy, location.fun =  ~ yy))
return_level[j] <- qgev(1 - 1/13, location = fit$results$par[1] + fit$results$par[2] * (70+i), scale = fit$results$par[3], shape = fit$results$par[4] + fit$results$par[5] * (70+i))
}
rt <- mean(return_level)
rtl <- quantile(return_level, probs = 0.025)
rtu <- quantile(return_level, probs = 0.975)
rlci <- rbind(rlci, data.frame(return_level = rt, Lower_CI = rtl, Upper_CI = rtu))
}
gev_time_varying_location_shape
data <- suppressWarnings(rgev(70, loc = gev_time_varying_location_shape$results$par[1] + gev_time_varying_location_shape$results$par[2] * (70+i), scale = gev_time_varying_location_shape$results$par[3], shape = gev_time_varying_location_shape$results$par[4] + gev_time_varying_location_shape$results$par[5] * (70+i)))
data
>>>>>>> Stashed changes
