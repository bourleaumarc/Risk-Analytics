winter_night_min <- night_min[format(night_min$date, "%m") %in% c("11", "12", "01", "02"), ]
# Invert night.min as temperatures are negative
winter_night_min$night.min <- -winter_night_min$night.min
# Visualise the data: plot and histogram
p <- ggplot(winter_night_min, aes(x = date, y = night.min)) +
geom_line() +  # This adds the line type plot
labs(x = "Date", y = "Night Min Temperature", title = "Winter Night Min Temperatures") +
theme_minimal()  # Optional: adds a minimal theme
interactive_plot_winter <- ggplotly(p)
interactive_plot_winter
hist(winter_night_min$night.min, breaks = 30, col = "skyblue", xlab = "Date", ylab = "Night Min Temperature", main = "Winter Night Min Temperatures frequency")
# Have more information about the distribution
min(winter_night_min$night.min); mean(winter_night_min$night.min); max(winter_night_min$night.min)
quantile(winter_night_min$night.min, 0.95)
# Choose the threshold using the mrlplot()
mrlplot(winter_night_min$night.min, main="Mean residual")
threshrange.plot(winter_night_min$night.min, r= c(0,6), nint =20)
par(mfrow = c(2, 2))
plot(gpd_raw_2)
title(main = "GPD fitted to raw data", line = 1, col.main = "red")
plot(gpd_declustered_2)
title(main = "GPD fitted to declustered data", line = 1, col.main = "red")
par(mfrow = c(1, 1))
years_part3_2 <- years_part3_2-1999
years_part3_2 <- c()
years_part3_2 <- c()
k <- 1
for (i in 1:nrow(night_min)) {
if (is.na(night_min$night.min[i])) {
next
} else {
years_part3_2[k] <- year(night_min$date[i])
k <- k + 1
}
}
years_part3_2 <- years_part3_2-1999
decl2 <- decluster(night_min$night.min, threshold=th_2, groups=years_part3_2, na.action=na.omit) # vector and groups need to have the same size
decl2 # we have 71 clusters
plot(decl2) # shows in grey the points that are not retained in the selection
# Fit GPD with clustered and declustered data
# Use fevd of the normal and declustered
gpd_raw_2 <- fevd(night_min$night.min, threshold = th_2, type = "GP")
gpd_declustered_2 <- fevd(decl2, threshold = th_2, type = "GP")
par(mfrow = c(2, 2))
plot(gpd_raw_2)
title(main = "GPD fitted to raw data", line = 1, col.main = "red")
plot(gpd_declustered_2)
title(main = "GPD fitted to declustered data", line = 1, col.main = "red")
par(mfrow = c(1, 1))
range(years_part3_2)
gpd_raw_2
gpd_declustered_2
par(mfrow = c(2, 2))
plot(gpd_raw_2)
title(main = "GPD fitted to raw data", line = 1, col.main = "red")
plot(gpd_declustered_2)
title(main = "GPD fitted to declustered data", line = 1, col.main = "red")
par(mfrow = c(1, 1))
night_min$year <- as.numeric(format(night_min$date, "%Y"))
night_min$month <- format(night_min$date, "%m")
# Create a new column for the winter season
# If the month is January or February, associate it with the previous year
night_min$winter_season <- ifelse(night_min$month %in% c("01", "02"),
paste(night_min$year - 1, night_min$year, sep="-"),
paste(night_min$year, night_min$year + 1, sep="-"))
# Now, subset to get the winter months (November, December, January, February)
winter_night_min <- night_min[night_min$month %in% c("11", "12", "01", "02"), ]
# Assuming 'night_min' has a 'date' column in Date format
night_min$year <- as.numeric(format(night_min$date, "%Y"))
night_min$month <- format(night_min$date, "%m")
# Create a new column for the winter season
# If the month is January or February, associate it with the previous year
night_min$winter_season <- ifelse(night_min$month %in% c("01", "02"),
paste(night_min$year - 1, night_min$year, sep="-"),
paste(night_min$year, night_min$year + 1, sep="-"))
# Now, subset to get the winter months (November, December, January, February)
winter_night_min <- night_min[night_min$month %in% c("11", "12", "01", "02"), ]
# Subset the winter months (November to February)
#winter_night_min <- night_min[format(night_min$date, "%m") %in% c("11", "12", "01", "02"), ]
# Invert night.min as temperatures are negative
winter_night_min$night.min <- -winter_night_min$night.min
# Visualise the data: plot and histogram
p <- ggplot(winter_night_min, aes(x = date, y = night.min)) +
geom_line() +  # This adds the line type plot
labs(x = "Date", y = "Night Min Temperature", title = "Winter Night Min Temperatures") +
theme_minimal()  # Optional: adds a minimal theme
interactive_plot_winter <- ggplotly(p)
interactive_plot_winter
hist(winter_night_min$night.min, breaks = 30, col = "skyblue", xlab = "Date", ylab = "Night Min Temperature", main = "Winter Night Min Temperatures frequency")
# Have more information about the distribution
min(winter_night_min$night.min); mean(winter_night_min$night.min); max(winter_night_min$night.min)
quantile(winter_night_min$night.min, 0.95)
# Choose the threshold using the mrlplot()
mrlplot(winter_night_min$night.min, main="Mean residual")
threshrange.plot(winter_night_min$night.min, r= c(0,6), nint =20)
th_2 <- 3.3
# Visualise the threshold
plot(winter_night_min$night.min, type = 'l')
abline(h=th_2,col=2) # looks good
# Assess the threshold
pot_mle_2 <- fevd(winter_night_min$night.min, method = "MLE", type="GP", threshold=th_2)
plot(pot_mle_2)
rl_mle <- return.level(pot_mle_2, conf = 0.05, return.period= c(2,5,10,20,50,100), do.ci=T) # diagnostic plot looks good and confidence interval become wider the longer the return level, which make sense
# Return level plots with MLE
par(mfcol=c(1,1))
plot(pot_mle_2, type="rl",
main="Return Level Plot for Oberwang w/ MLE",
ylim=c(0,200), pch=16)
loc <- as.numeric(return.level(pot_mle_2, conf = 0.05, return.period=50))
segments(50, 0, 50, loc, col= 'midnightblue',lty=6)
segments(0.01,loc,50, loc, col='midnightblue', lty=6)
# Assess wether extremes occur in a cluster using extremalindex()
extremalindex(winter_night_min$night.min, th_2) # 0.32 so 1/0.32 = 3.125
########################### Declustering ###########################
# We need to create a vector of size night_min that stores the year.
years_part3_2 <- c()
k <- 1
for (i in 1:nrow(night_min)) {
if (is.na(night_min$night.min[i])) {
next
} else {
years_part3_2[k] <- year(night_min$date[i])
k <- k + 1
}
}
years_part3_2 <- years_part3_2-1999
# Use decluster function of extRemes
decl2 <- decluster(night_min$night.min, threshold=th_2, groups=years_part3_2, na.action=na.omit) # vector and groups need to have the same size
decl2 # we have 71 clusters
plot(decl2) # shows in grey the points that are not retained in the selection
# Fit GPD with clustered and declustered data
# Use fevd of the normal and declustered
gpd_raw_2 <- fevd(night_min$night.min, threshold = th_2, type = "GP")
gpd_declustered_2 <- fevd(decl2, threshold = th_2, type = "GP")
par(mfrow = c(2, 2))
plot(gpd_raw_2)
title(main = "GPD fitted to raw data", line = 1, col.main = "red")
plot(gpd_declustered_2)
title(main = "GPD fitted to declustered data", line = 1, col.main = "red")
par(mfrow = c(1, 1))
# Assess the fit: AIC for raw is 38100, AIC for declustered data is 193
# Create a new column for the winter season
night_min$winter_season <- ifelse(night_min$month %in% c("01", "02"),
paste(night_min$year - 1, night_min$year, sep="-"),
paste(night_min$year, night_min$year + 1, sep="-"))
# Subset to get the winter months (November, December, January, February)
# by considering both the 'winter_season' and the 'month'
winter_night_min <- night_min[night_min$winter_season == paste(night_min$year, night_min$year + 1, sep="-") &
night_min$month %in% c("11", "12") |
night_min$winter_season == paste(night_min$year - 1, night_min$year, sep="-") &
night_min$month %in% c("01", "02"), ]
# Assuming 'night_min' has a 'date' column in Date format
night_min$year <- as.numeric(format(night_min$date, "%Y"))
night_min$month <- format(night_min$date, "%m")
# Create a new column for the winter season
night_min$winter_season <- ifelse(night_min$month %in% c("01", "02"),
paste(night_min$year - 1, night_min$year, sep="-"),
paste(night_min$year, night_min$year + 1, sep="-"))
# Subset to get the winter months (November, December, January, February)
# by considering both the 'winter_season' and the 'month'
winter_night_min <- night_min[night_min$winter_season == paste(night_min$year, night_min$year + 1, sep="-") &
night_min$month %in% c("11", "12") |
night_min$winter_season == paste(night_min$year - 1, night_min$year, sep="-") &
night_min$month %in% c("01", "02"), ]
# Subset the winter months (November to February)
#winter_night_min <- night_min[format(night_min$date, "%m") %in% c("11", "12", "01", "02"), ]
# Invert night.min as temperatures are negative
winter_night_min$night.min <- -winter_night_min$night.min
# Visualise the data: plot and histogram
p <- ggplot(winter_night_min, aes(x = date, y = night.min)) +
geom_line() +  # This adds the line type plot
labs(x = "Date", y = "Night Min Temperature", title = "Winter Night Min Temperatures") +
theme_minimal()  # Optional: adds a minimal theme
interactive_plot_winter <- ggplotly(p)
interactive_plot_winter
hist(winter_night_min$night.min, breaks = 30, col = "skyblue", xlab = "Date", ylab = "Night Min Temperature", main = "Winter Night Min Temperatures frequency")
# Have more information about the distribution
min(winter_night_min$night.min); mean(winter_night_min$night.min); max(winter_night_min$night.min)
quantile(winter_night_min$night.min, 0.95)
# Choose the threshold using the mrlplot()
mrlplot(winter_night_min$night.min, main="Mean residual")
threshrange.plot(winter_night_min$night.min, r= c(0,6), nint =20)
th_2 <- 3.3
# Visualise the threshold
plot(winter_night_min$night.min, type = 'l')
abline(h=th_2,col=2) # looks good
# Assess the threshold
pot_mle_2 <- fevd(winter_night_min$night.min, method = "MLE", type="GP", threshold=th_2)
plot(pot_mle_2)
rl_mle <- return.level(pot_mle_2, conf = 0.05, return.period= c(2,5,10,20,50,100), do.ci=T) # diagnostic plot looks good and confidence interval become wider the longer the return level, which make sense
# Return level plots with MLE
par(mfcol=c(1,1))
plot(pot_mle_2, type="rl",
main="Return Level Plot for Oberwang w/ MLE",
ylim=c(0,200), pch=16)
loc <- as.numeric(return.level(pot_mle_2, conf = 0.05, return.period=50))
segments(50, 0, 50, loc, col= 'midnightblue',lty=6)
segments(0.01,loc,50, loc, col='midnightblue', lty=6)
# Assess wether extremes occur in a cluster using extremalindex()
extremalindex(winter_night_min$night.min, th_2) # 0.32 so 1/0.32 = 3.125
########################### Declustering ###########################
# We need to create a vector of size night_min that stores the year.
years_part3_2 <- c()
k <- 1
for (i in 1:nrow(night_min)) {
if (is.na(night_min$night.min[i])) {
next
} else {
years_part3_2[k] <- year(night_min$date[i])
k <- k + 1
}
}
years_part3_2 <- years_part3_2-1999
# Use decluster function of extRemes
decl2 <- decluster(night_min$night.min, threshold=th_2, groups=years_part3_2, na.action=na.omit) # vector and groups need to have the same size
decl2 # we have 71 clusters
plot(decl2) # shows in grey the points that are not retained in the selection
# Fit GPD with clustered and declustered data
# Use fevd of the normal and declustered
gpd_raw_2 <- fevd(night_min$night.min, threshold = th_2, type = "GP")
gpd_declustered_2 <- fevd(decl2, threshold = th_2, type = "GP")
par(mfrow = c(2, 2))
plot(gpd_raw_2)
title(main = "GPD fitted to raw data", line = 1, col.main = "red")
plot(gpd_declustered_2)
title(main = "GPD fitted to declustered data", line = 1, col.main = "red")
par(mfrow = c(1, 1))
# Assess the fit: AIC for raw is 38100, AIC for declustered data is 193
View(winter_night_min)
winter_night_min$night.min <- -winter_night_min$night.min
# Assuming 'night_min' has a 'date' column in Date format
night_min$year <- as.numeric(format(night_min$date, "%Y"))
night_min$month <- format(night_min$date, "%m")
# Create a new column for the winter season
night_min$winter_season <- ifelse(night_min$month %in% c("01", "02"),
paste(night_min$year - 1, night_min$year, sep="-"),
paste(night_min$year, night_min$year + 1, sep="-"))
# Subset to get the winter months (November, December, January, February)
# by considering both the 'winter_season' and the 'month'
winter_night_min <- night_min[night_min$winter_season == paste(night_min$year, night_min$year + 1, sep="-") &
night_min$month %in% c("11", "12") |
night_min$winter_season == paste(night_min$year - 1, night_min$year, sep="-") &
night_min$month %in% c("01", "02"), ]
# Subset the winter months (November to February)
#winter_night_min <- night_min[format(night_min$date, "%m") %in% c("11", "12", "01", "02"), ]
# Invert night.min as temperatures are negative
winter_night_min$night.min <- -winter_night_min$night.min
# Visualise the data: plot and histogram
p <- ggplot(winter_night_min, aes(x = date, y = night.min)) +
geom_line() +  # This adds the line type plot
labs(x = "Date", y = "Night Min Temperature", title = "Winter Night Min Temperatures") +
theme_minimal()  # Optional: adds a minimal theme
interactive_plot_winter <- ggplotly(p)
interactive_plot_winter
hist(winter_night_min$night.min, breaks = 30, col = "skyblue", xlab = "Date", ylab = "Night Min Temperature", main = "Winter Night Min Temperatures frequency")
# Have more information about the distribution
min(winter_night_min$night.min); mean(winter_night_min$night.min); max(winter_night_min$night.min)
quantile(winter_night_min$night.min, 0.95)
# Choose the threshold using the mrlplot()
mrlplot(winter_night_min$night.min, main="Mean residual")
threshrange.plot(winter_night_min$night.min, r= c(0,6), nint =20)
th_2 <- 3.3
# Visualise the threshold
plot(winter_night_min$night.min, type = 'l')
abline(h=th_2,col=2) # looks good
# Assess the threshold
pot_mle_2 <- fevd(winter_night_min$night.min, method = "MLE", type="GP", threshold=th_2)
plot(pot_mle_2)
rl_mle <- return.level(pot_mle_2, conf = 0.05, return.period= c(2,5,10,20,50,100), do.ci=T) # diagnostic plot looks good and confidence interval become wider the longer the return level, which make sense
# Return level plots with MLE
par(mfcol=c(1,1))
plot(pot_mle_2, type="rl",
main="Return Level Plot for Oberwang w/ MLE",
ylim=c(0,200), pch=16)
loc <- as.numeric(return.level(pot_mle_2, conf = 0.05, return.period=50))
segments(50, 0, 50, loc, col= 'midnightblue',lty=6)
segments(0.01,loc,50, loc, col='midnightblue', lty=6)
# Assess wether extremes occur in a cluster using extremalindex()
extremalindex(winter_night_min$night.min, th_2) # 0.32 so 1/0.32 = 3.125
########################### Declustering ###########################
# We need to create a vector of size night_min that stores the year.
years_part3_2 <- c()
k <- 1
for (i in 1:nrow(winter_night_min)) {
if (is.na(winter_night_min$night.min[i])) {
next
} else {
years_part3_2[k] <- year(winter_night_min$date[i])
k <- k + 1
}
}
years_part3_2 <- years_part3_2-1999
# Use decluster function of extRemes
decl2 <- decluster(winter_night_min$night.min, threshold=th_2, groups=years_part3_2, na.action=na.omit) # vector and groups need to have the same size
decl2 # we have 71 clusters
plot(decl2) # shows in grey the points that are not retained in the selection
# Fit GPD with clustered and declustered data
# Use fevd of the normal and declustered
gpd_raw_2 <- fevd(winter_night_min$night.min, threshold = th_2, type = "GP")
gpd_declustered_2 <- fevd(decl2, threshold = th_2, type = "GP")
par(mfrow = c(2, 2))
plot(gpd_raw_2)
title(main = "GPD fitted to raw data", line = 1, col.main = "red")
plot(gpd_declustered_2)
title(main = "GPD fitted to declustered data", line = 1, col.main = "red")
par(mfrow = c(1, 1))
# Assess the fit: AIC for raw is 38100, AIC for declustered data is 193
night_min$year <- as.numeric(format(night_min$date, "%Y"))
night_min$month <- format(night_min$date, "%m")
# Create a new column for the winter season
night_min$winter_season <- ifelse(night_min$month %in% c("01", "02"),
paste(night_min$year - 1, night_min$year, sep="-"),
paste(night_min$year, night_min$year + 1, sep="-"))
# Subset to get the winter months (November, December, January, February)
winter_night_min <- night_min[(
(night_min$winter_season == paste(night_min$year, night_min$year + 1, sep="-") &
night_min$month %in% c("11", "12")) |
(night_min$winter_season == paste(night_min$year - 1, night_min$year, sep="-") &
night_min$month %in% c("01", "02"))
), ]
# Assuming 'night_min' has a 'date' column in Date format
night_min$year <- as.numeric(format(night_min$date, "%Y"))
night_min$month <- format(night_min$date, "%m")
# Create a new column for the winter season
night_min$winter_season <- ifelse(night_min$month %in% c("01", "02"),
paste(night_min$year - 1, night_min$year, sep="-"),
paste(night_min$year, night_min$year + 1, sep="-"))
# Subset to get the winter months (November, December, January, February)
winter_night_min <- night_min[(
(night_min$winter_season == paste(night_min$year, night_min$year + 1, sep="-") &
night_min$month %in% c("11", "12")) |
(night_min$winter_season == paste(night_min$year - 1, night_min$year, sep="-") &
night_min$month %in% c("01", "02"))
), ]
# Subset the winter months (November to February)
#winter_night_min <- night_min[format(night_min$date, "%m") %in% c("11", "12", "01", "02"), ]
# Invert night.min as temperatures are negative
winter_night_min$night.min <- -winter_night_min$night.min
# Visualise the data: plot and histogram
p <- ggplot(winter_night_min, aes(x = date, y = night.min)) +
geom_line() +  # This adds the line type plot
labs(x = "Date", y = "Night Min Temperature", title = "Winter Night Min Temperatures") +
theme_minimal()  # Optional: adds a minimal theme
interactive_plot_winter <- ggplotly(p)
interactive_plot_winter
hist(winter_night_min$night.min, breaks = 30, col = "skyblue", xlab = "Date", ylab = "Night Min Temperature", main = "Winter Night Min Temperatures frequency")
# Have more information about the distribution
min(winter_night_min$night.min); mean(winter_night_min$night.min); max(winter_night_min$night.min)
quantile(winter_night_min$night.min, 0.95)
# Choose the threshold using the mrlplot()
mrlplot(winter_night_min$night.min, main="Mean residual")
threshrange.plot(winter_night_min$night.min, r= c(0,6), nint =20)
th_2 <- 3.3
# Visualise the threshold
plot(winter_night_min$night.min, type = 'l')
abline(h=th_2,col=2) # looks good
# Assess the threshold
pot_mle_2 <- fevd(winter_night_min$night.min, method = "MLE", type="GP", threshold=th_2)
plot(pot_mle_2)
rl_mle <- return.level(pot_mle_2, conf = 0.05, return.period= c(2,5,10,20,50,100), do.ci=T) # diagnostic plot looks good and confidence interval become wider the longer the return level, which make sense
# Return level plots with MLE
par(mfcol=c(1,1))
plot(pot_mle_2, type="rl",
main="Return Level Plot for Oberwang w/ MLE",
ylim=c(0,200), pch=16)
loc <- as.numeric(return.level(pot_mle_2, conf = 0.05, return.period=50))
segments(50, 0, 50, loc, col= 'midnightblue',lty=6)
segments(0.01,loc,50, loc, col='midnightblue', lty=6)
# Assess wether extremes occur in a cluster using extremalindex()
extremalindex(winter_night_min$night.min, th_2) # 0.32 so 1/0.32 = 3.125
########################### Declustering ###########################
# We need to create a vector of size night_min that stores the year.
years_part3_2 <- c()
k <- 1
for (i in 1:nrow(winter_night_min)) {
if (is.na(winter_night_min$night.min[i])) {
next
} else {
years_part3_2[k] <- year(winter_night_min$date[i])
k <- k + 1
}
}
years_part3_2 <- years_part3_2-1999
# Use decluster function of extRemes
decl2 <- decluster(winter_night_min$night.min, threshold=th_2, groups=years_part3_2, na.action=na.omit) # vector and groups need to have the same size
decl2 # we have 71 clusters
plot(decl2) # shows in grey the points that are not retained in the selection
# Fit GPD with clustered and declustered data
# Use fevd of the normal and declustered
gpd_raw_2 <- fevd(winter_night_min$night.min, threshold = th_2, type = "GP")
gpd_declustered_2 <- fevd(decl2, threshold = th_2, type = "GP")
par(mfrow = c(2, 2))
plot(gpd_raw_2)
title(main = "GPD fitted to raw data", line = 1, col.main = "red")
plot(gpd_declustered_2)
title(main = "GPD fitted to declustered data", line = 1, col.main = "red")
par(mfrow = c(1, 1))
# Assess the fit: AIC for raw is 38100, AIC for declustered data is 193
# Assuming 'night_min' has a 'date' column in Date format
night_min$year <- as.numeric(format(night_min$date, "%Y"))
night_min$month <- format(night_min$date, "%m")
# Create a new column for the winter season
night_min$winter_season <- ifelse(night_min$month %in% c("01", "02"),
paste(night_min$year - 1, night_min$year, sep="-"),
paste(night_min$year, night_min$year + 1, sep="-"))
# November and December of year t and January and February of year t+1
winter_night_min <- night_min[(night_min$month %in% c("11", "12") &
night_min$year == t) |
(night_min$month %in% c("01", "02") &
night_min$year == t + 1), ]
night_min$year <- as.numeric(format(night_min$date, "%Y"))
night_min$month <- format(night_min$date, "%m")
night_min <- night_min %>%
mutate(
year = as.numeric(format(date, "%Y")),
month = format(date, "%m"),
season_year = ifelse(month %in% c("01", "02"), year - 1, year)
)
# Assuming 'night_min' has a 'date' column in Date format
night_min$year <- as.numeric(format(night_min$date, "%Y"))
night_min$month <- format(night_min$date, "%m")
night_min <- night_min %>%
mutate(
year = as.numeric(format(date, "%Y")),
month = format(date, "%m"),
season_year = ifelse(month %in% c("01", "02"), year - 1, year)
)
# Subset for winter months
winter_night_min <- night_min %>%
filter(
(month %in% c("11", "12") & season_year == year) |
(month %in% c("01", "02") & season_year == year - 1)
)
# Assuming 'night_min' has a 'date' column in Date format
night_min$year <- as.numeric(format(night_min$date, "%Y"))
night_min$month <- format(night_min$date, "%m")
night_min <- night_min %>%
mutate(
year = as.numeric(format(date, "%Y")),
month = format(date, "%m"),
season_year = ifelse(month %in% c("01", "02"), year - 1, year)
)
# Subset for winter months
winter_night_min <- night_min %>%
filter(
(month %in% c("11", "12") & season_year == year) |
(month %in% c("01", "02") & season_year == year - 1)
)
# Subset the winter months (November to February)
#winter_night_min <- night_min[format(night_min$date, "%m") %in% c("11", "12", "01", "02"), ]
# Invert night.min as temperatures are negative
winter_night_min$night.min <- -winter_night_min$night.min
# Visualise the data: plot and histogram
p <- ggplot(winter_night_min, aes(x = date, y = night.min)) +
geom_line() +  # This adds the line type plot
labs(x = "Date", y = "Night Min Temperature", title = "Winter Night Min Temperatures") +
theme_minimal()  # Optional: adds a minimal theme
interactive_plot_winter <- ggplotly(p)
interactive_plot_winter
hist(winter_night_min$night.min, breaks = 30, col = "skyblue", xlab = "Date", ylab = "Night Min Temperature", main = "Winter Night Min Temperatures frequency")
# Have more information about the distribution
min(winter_night_min$night.min); mean(winter_night_min$night.min); max(winter_night_min$night.min)
quantile(winter_night_min$night.min, 0.95)
# Choose the threshold using the mrlplot()
mrlplot(winter_night_min$night.min, main="Mean residual")
threshrange.plot(winter_night_min$night.min, r= c(0,6), nint =20)
th_2 <- 3.3
# Visualise the threshold
plot(winter_night_min$night.min, type = 'l')
abline(h=th_2,col=2) # looks good
# Assess the threshold
pot_mle_2 <- fevd(winter_night_min$night.min, method = "MLE", type="GP", threshold=th_2)
plot(pot_mle_2)
rl_mle <- return.level(pot_mle_2, conf = 0.05, return.period= c(2,5,10,20,50,100), do.ci=T) # diagnostic plot looks good and confidence interval become wider the longer the return level, which make sense
# Return level plots with MLE
par(mfcol=c(1,1))
plot(pot_mle_2, type="rl",
main="Return Level Plot for Oberwang w/ MLE",
ylim=c(0,200), pch=16)
loc <- as.numeric(return.level(pot_mle_2, conf = 0.05, return.period=50))
segments(50, 0, 50, loc, col= 'midnightblue',lty=6)
segments(0.01,loc,50, loc, col='midnightblue', lty=6)
# Assess wether extremes occur in a cluster using extremalindex()
extremalindex(winter_night_min$night.min, th_2) # 0.32 so 1/0.32 = 3.125
########################### Declustering ###########################
# We need to create a vector of size night_min that stores the year.
years_part3_2 <- c()
k <- 1
for (i in 1:nrow(winter_night_min)) {
if (is.na(winter_night_min$night.min[i])) {
next
} else {
years_part3_2[k] <- year(winter_night_min$date[i])
k <- k + 1
}
}
years_part3_2 <- years_part3_2-1999
# Use decluster function of extRemes
decl2 <- decluster(winter_night_min$night.min, threshold=th_2, groups=years_part3_2, na.action=na.omit) # vector and groups need to have the same size
decl2 # we have 71 clusters
plot(decl2) # shows in grey the points that are not retained in the selection
# Fit GPD with clustered and declustered data
# Use fevd of the normal and declustered
gpd_raw_2 <- fevd(winter_night_min$night.min, threshold = th_2, type = "GP")
gpd_declustered_2 <- fevd(decl2, threshold = th_2, type = "GP")
par(mfrow = c(2, 2))
plot(gpd_raw_2)
title(main = "GPD fitted to raw data", line = 1, col.main = "red")
plot(gpd_declustered_2)
title(main = "GPD fitted to declustered data", line = 1, col.main = "red")
par(mfrow = c(1, 1))
# Assess the fit: AIC for raw is 38100, AIC for declustered data is 193
